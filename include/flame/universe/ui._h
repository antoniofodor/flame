namespace flame
{
	struct UI
	{
		inline cDataKeeper* c_data_keeper()
		{
			auto c = cDataKeeper::create();
			if (next_component_id)
			{
				c->id = next_component_id;
				next_component_id = 0;
			}
			current_entity->add_component(c);
			return c;
		}
		
		void style_set_to_light()
		{
			change_style(FontSize, common(Vec1u(16U)));
			change_style(BackgroundColor, common(Vec4c(240, 240, 240, 255)));
			change_style(ForegroundColor, common(Vec4c(0, 0, 0, 255)));
			change_style(TextColorNormal, common(Vec4c(0, 0, 0, 255)));
			change_style(TextColorElse, common(Vec4c(0, 120, 205, 255)));
			change_style(FrameColorNormal, common(Vec4c(220, 220, 220, 255)));
			change_style(FrameColorHovering, common(Vec4c(230, 230, 230, 255)));
			change_style(FrameColorActive, common(Vec4c(225, 225, 225, 255)));
			change_style(SelectedColorNormal, common(Vec4c(200, 220, 245, 255)));
			change_style(SelectedColorHovering, common(Vec4c(205, 225, 250, 255)));
			change_style(SelectedColorActive, common(Vec4c(195, 215, 240, 255)));
			change_style(TabColorNormal, common(Vec4c(0, 0, 0, 0)));
			change_style(TabColorElse, common(Vec4c(28, 151, 234, 255)));
			change_style(TabTextColorNormal, common(Vec4c(0, 0, 0, 255)));
			change_style(TabTextColorElse, common(Vec4c(255, 255, 255, 255)));
			change_style(SelectedTabColorNormal, common(Vec4c(0, 122, 204, 255)));
			change_style(SelectedTabColorElse, common(Vec4c(0, 122, 204, 255)));
			change_style(SelectedTabTextColorNormal, common(Vec4c(255, 255, 255, 255)));
			change_style(SelectedTabTextColorElse, common(Vec4c(255, 255, 255, 255)));
		}

		inline Entity* e_drag_edit()
		{
			auto e = e_begin_layout(LayoutVertical);
			e->get_component(cLayout)->fence = 1;

			auto ee = e_edit(50.f);
			ee->set_visible(false);
			push_style(ButtonColorNormal, common(style(FrameColorNormal).c));
			push_style(ButtonColorHovering, common(style(FrameColorHovering).c));
			push_style(ButtonColorActive, common(style(FrameColorActive).c));
			auto ed = e_button(L"");
			pop_style(ButtonColorNormal);
			pop_style(ButtonColorHovering);
			pop_style(ButtonColorActive);

			e_end_layout();

			struct Capturing
			{
				Entity* ee;
				Entity* ed;
			}capture;
			capture.ee = ee;
			capture.ed = ed;

			ee->get_component(cEventReceiver)->focus_listeners.add([](Capture& c, bool focusing) {
				auto& capture = c.data<Capturing>();
				if (!focusing)
				{
					capture.ee->set_visible(false);
					capture.ed->set_visible(true);
				}
				return true;
			}, Capture().set_data(&capture));

			ed->get_component(cEventReceiver)->mouse_listeners.add([](Capture& c, KeyStateFlags action, MouseKey key, const Vec2i& pos) {
				auto& capture = c.data<Capturing>();
				if (is_mouse_clicked(action, key) && pos == 0)
				{
					capture.ee->set_visible(true);
					capture.ed->set_visible(false);
					c.current<cEventReceiver>()->dispatcher->next_focusing = capture.ee->get_component(cEventReceiver);
				}
				return true;
			}, Capture().set_data(&capture));

			return e;
		}

		inline Entity* e_begin_splitter(SplitterType type)
		{
			auto e = e_empty();
			c_element();
			c_aligner(AlignMinMax, AlignMinMax);
			c_layout(type == SplitterHorizontal ? LayoutHorizontal : LayoutVertical, false, false);
			parents.push(e);
			e_empty();
			cSplitter::make(current_root->world, current_entity, type);
			return e;
		}

		inline Entity* e_begin_tree(bool fit_parent)
		{
			auto e = e_empty();
			auto ce = c_element();
			c_event_receiver();
			if (fit_parent)
			{
				ce->clip_flags = ClipChildren;
				c_aligner(AlignMinMax, AlignMinMax);
			}
			auto cl = c_layout(LayoutVertical);
			cl->item_padding = 4.f;
			if (fit_parent)
			{
				cl->width_fit_children = false;
				cl->height_fit_children = false;
			}
			c_tree();
			parents.push(e);
			return e;
		}

		inline Entity* e_tree_leaf(const wchar_t* text)
		{
			auto e = e_empty();
			c_element()->padding = Vec4f(style(FontSize).u.x() + 4.f, 2.f, 4.f, 2.f);
			c_text()->set_text(text);
			c_event_receiver();
			auto cs = c_style_color2();
			cs->color_normal[0] = Vec4c(0);
			cs->color_hovering[0] = style(FrameColorHovering).c;
			cs->color_active[0] = style(FrameColorActive).c;
			cs->color_normal[1] = style(SelectedColorNormal).c;
			cs->color_hovering[1] = style(SelectedColorHovering).c;
			cs->color_active[1] = style(SelectedColorActive).c;
			cs->style();
			c_tree_leaf();
			return e;
		}

		inline Entity* e_begin_tree_node(const wchar_t* text, bool collapsed = false)
		{
			auto e = e_empty();
			c_element();
			c_layout(LayoutVertical)->item_padding = 4.f;
			c_tree_node();
			parents.push(e);
			{
				auto e = e_empty();
				c_element()->padding = Vec4f(style(FontSize).u.x() + 4.f, 2.f, 4.f, 2.f);
				c_text()->set_text(text);
				c_event_receiver();
				auto cs = c_style_color2();
				cs->color_normal[0] = Vec4c(0);
				cs->color_hovering[0] = style(FrameColorHovering).c;
				cs->color_active[0] = style(FrameColorActive).c;
				cs->color_normal[1] = style(SelectedColorNormal).c;
				cs->color_hovering[1] = style(SelectedColorHovering).c;
				cs->color_active[1] = style(SelectedColorActive).c;
				cs->style();
				c_layout();
				c_tree_node_title();
				parents.push(e);
				{
					e_empty();
					c_element()->padding = Vec4f(0.f, 2.f, 4.f, 2.f);
					c_text()->set_text(collapsed ? Icon_CARET_RIGHT : Icon_CARET_DOWN);
					c_event_receiver();
					auto cs = c_style_text_color();
					cs->color_normal = style(TextColorNormal).c;
					cs->color_else = style(TextColorElse).c;
					cs->style();
					c_tree_node_arrow();
				}
				parents.pop();
			}
			auto es = e_empty();
			es->set_visible(!collapsed);
			c_element()->padding = Vec4f(style(FontSize).u.x() * 0.5f, 0.f, 0.f, 0.f);
			c_layout(LayoutVertical)->item_padding = 4.f;
			parents.pop();
			parents.push(es);
			return e;
		}

		inline Entity* e_end_combobox(int idx = -1)
		{
			auto max_width = 0U;
			for (auto c : eis->children)
			{
				auto ct = c->get_component(cText);
				max_width = max(max_width, ct->font_atlas->text_size(ct->font_size, ct->text.v).x());
			}
			ecb->get_component(cElement)->add_width(8.f + max_width + style(FontSize).u.x());
		}
		
		inline Entity* e_begin_button_menu(const wchar_t* text)
		{
			auto e = e_empty();
			c_element()->padding = Vec4f(4.f, 2.f, 4.f, 2.f);
			c_text()->set_text(text);
			c_event_receiver();
			auto cm = c_menu(cMenu::ModeMain);
			cm->root = current_root;
			auto cs = c_style_color();
			cs->color_normal = style(ButtonColorNormal).c;
			cs->color_hovering = style(ButtonColorHovering).c;
			cs->color_active = style(ButtonColorActive).c;
			cs->style();
			parents.push(cm->items);
			return e;
		}

		inline Entity* e_separator()
		{
			auto e = e_empty();
			auto ce = c_element();
			ce->size.y() = style(FontSize).u.x() * 0.5f;
			ce->padding = Vec4f(4.f, 2.f, 4.f, 2.f);
			ce->color = style(FrameColorNormal).c;
			auto ceed = c_extra_element_drawing();
			ceed->draw_flags = ExtraDrawHorizontalLine;
			ceed->thickness = 1.f;
			ceed->color = style(TextColorNormal).c.copy().set_w(128);
			c_aligner(AlignMinMax | AlignGreedy, 0);
			return e;
		}

		inline void e_begin_popup_menu(bool attach_to_parent = true)
		{
			if (attach_to_parent)
				current_entity = parents.top();
			auto cm = c_menu(cMenu::ModeContext);
			cm->root = current_root;
			parents.push(cm->items);
		}

		inline Entity* e_bring_to_front()
		{
			auto e = e_empty();
			cBringToFront::make(e);
			return e;
		}

		inline Entity* e_begin_window(const wchar_t* title, bool close_button = true)
		{
			Entity* el;
			auto e = e_empty();
			auto ce = c_element();
			ce->size += Vec2f(0.f, 4.f + style(FontSize).u.x());
			ce->frame_thickness = 2.f;
			ce->color = style(BackgroundColor).c;
			ce->frame_color = style(ForegroundColor).c;
			c_event_receiver();
			c_layout(LayoutVertical)->fence = -1;
			c_moveable();
			parents.push(e);
			{
				e_empty();
				auto ce = c_element();
				ce->padding = Vec4f(4.f, 2.f, 4.f + style(FontSize).u.x(), 2.f);
				ce->color = style(SelectedTabColorNormal).c;
				c_text()->set_text(title);
				c_aligner(AlignMinMax | AlignGreedy, 0);
				if (close_button)
				{
					c_layout();
					parents.push(current_entity);
					e_button(Icon_TIMES, [](Capture& c) {
						looper().add_event([](Capture& c) {
							auto e = c.thiz<Entity>();
							e->parent->remove_child(e);
						}, Capture().set_thiz(c.thiz<Entity>()));
					}, Capture().set_thiz(e), false);
					c_aligner(AlignMax | AlignAbsolute, 0);
					parents.pop();
				}

				el = e_empty();
				c_element()->padding = Vec4f(8.f, 4.f, 8.f, 4.f);
				c_layout(LayoutVertical)->item_padding = 4.f;

				e_empty();
				c_element();
				c_event_receiver()->pass_checkers.add([](Capture& c, cEventReceiver* er, bool* pass) {
					*pass = true;
					return true;
				}, Capture());
				c_aligner(AlignMinMax, AlignMinMax);
				c_bring_to_front();
			}
			parents.pop();
			parents.push(el);
			return e;
		}

		inline Entity* e_begin_docker_floating_container()
		{
			auto e = e_empty();
			cDockerTab::make_floating_container(current_root->world, e, next_element_pos, next_element_size);
			next_element_pos = next_element_size = 0.f;
			parents.push(e);
			return e;
		}

		inline Entity* e_begin_docker_static_container()
		{
			auto e = e_empty();
			cDockerTab::make_static_container(current_root->world, e);
			parents.push(e);
			return e;
		}

		inline Entity* e_begin_docker_layout(LayoutType type)
		{
			auto e = e_empty();
			cDockerTab::make_layout(current_root->world, e, type);
			parents.push(e);
			return e;
		}

		inline Entity* e_begin_docker()
		{
			auto e = e_empty();
			cDockerTab::make_docker(current_root->world, e);
			parents.push(e);
			return e;
		}

		inline std::pair<Entity*, Entity*> e_begin_docker_page(const wchar_t* title, void(*on_close)(Capture& c) = nullptr, const Capture& _close_capture = Capture())
		{
			parents.push(parents.top()->children[0]);
			auto et = e_empty();
			et->name = "docker_tab";
			c_element()->padding = Vec4f(4.f, 2.f, style(FontSize).u.x() + 6.f, 2.f);
			c_text()->set_text(title);
			c_event_receiver();
			auto csb = c_style_color2();
			csb->color_normal[0] = style(TabColorNormal).c;
			csb->color_hovering[0] = style(TabColorElse).c;
			csb->color_active[0] = style(TabColorElse).c;
			csb->color_normal[1] = style(SelectedTabColorNormal).c;
			csb->color_hovering[1] = style(SelectedTabColorElse).c;
			csb->color_active[1] = style(SelectedTabColorElse).c;
			csb->style();
			auto cst = c_style_text_color2();
			cst->color_normal[0] = style(TabTextColorNormal).c;
			cst->color_else[0] = style(TabTextColorElse).c;
			cst->color_normal[1] = style(SelectedTabTextColorNormal).c;
			cst->color_else[1] = style(SelectedTabTextColorElse).c;
			cst->style();
			c_list_item();
			c_layout();
			auto cdt = c_docker_tab();
			cdt->root = current_root;
			parents.push(et);
			{
				struct Capturing
				{
					cDockerTab* t;
					void(*f)(Capture&);
				}capture;
				capture.t = cdt;
				capture.f = on_close;
				push_style(TextColorNormal, common(style(TabTextColorElse).c));
				e_button(Icon_TIMES, [](Capture& c) {
					auto& capture = c.data<Capturing>();
					if (capture.f)
						capture.f(c.release<Capturing>());
					looper().add_event([](Capture& c) {
						c.data<cDockerTab*>()->take_away(true);
					}, Capture().set_data(&capture.t));
				}, Capture().absorb(&capture, _close_capture, true), false);
				c_aligner(AlignMax | AlignAbsolute, 0);
				pop_style(TextColorNormal);
			}
			parents.pop();
			parents.pop();
			parents.push(parents.top()->children[1]);
			auto ep = e_empty();
			{
				auto ce = c_element();
				ce->color = style(BackgroundColor).c;
				ce->clip_flags = ClipChildren;
				c_aligner(AlignMinMax, AlignMinMax);
			}
			parents.pop();
			parents.push(ep);
			return std::make_pair(et, ep);
		}

		inline Entity* e_begin_dialog()
		{
			auto l = add_layer(current_root, nullptr, true, Vec4c(0, 0, 0, 127));
			current_entity = l;
			c_layout();
			parents.push(l);
			auto e = e_empty();
			auto ce = c_element();
			ce->padding = Vec4f(8.f);
			ce->frame_thickness = 2.f;
			ce->color = style(BackgroundColor).c;
			ce->frame_color = col3_inv(style(BackgroundColor).c);
			c_aligner(AlignMiddle, AlignMiddle);
			c_layout(LayoutVertical)->item_padding = 4.f;
			parents.pop();
			parents.push(e);
			return e;
		}

		inline Entity* e_message_dialog(const wchar_t* message)
		{
			auto e = e_begin_dialog();
			auto l = e->parent;
			e_text(message);
			e_button(L"OK", [](Capture& c) {
				remove_layer(c.thiz<Entity>());
			}, Capture().set_thiz(l));
			c_aligner(AlignMiddle, 0);
			e_end_dialog();
			return e;
		}

		inline Entity* e_confirm_dialog(const wchar_t* title, void (*callback)(Capture& c, bool yes), const Capture& _capture)
		{
			auto e = e_begin_dialog();
			auto l = e->parent;
			e_text(title);
			e_begin_layout(LayoutHorizontal, 4.f);
			c_aligner(AlignMiddle, 0);
			struct Capturing
			{
				Entity* l;
				void(*f)(Capture&, bool);
			}capture;
			capture.l = l;
			capture.f = callback;
			e_button(L"OK", [](Capture& c) {
				auto& m = c.data<Capturing>();
				remove_layer(m.l);
				m.f(c.release<Capturing>(), true);
			}, Capture().absorb(&capture, _capture));
			e_button(L"Cancel", [](Capture& c) {
				auto& m = c.data<Capturing>();
				remove_layer(m.l);
				m.f(c.release<Capturing>(), false);
			}, Capture().absorb(&capture, _capture));
			f_free(_capture._data);
			e_end_layout();
			e_end_dialog();
			return e;
		}

		inline Entity* e_input_dialog(const wchar_t* title, void (*callback)(Capture& c, bool ok, const wchar_t* text), const Capture& _capture, const wchar_t* default_text = nullptr)
		{
			auto e = e_begin_dialog();
			auto l = e->parent;
			e_text(title);
			auto ct = e_edit(100.f)->get_component(cText);
			if (default_text)
				ct->set_text(default_text);
			e_begin_layout(LayoutHorizontal, 4.f);
			c_aligner(AlignMiddle, 0);
			struct Capturing
			{
				Entity* l;
				cText* t;
				void(*f)(Capture&, bool, const wchar_t*);
			}capture;
			capture.l = l;
			capture.t = ct;
			capture.f = callback;
			e_button(L"OK", [](Capture& c) {
				auto& m = c.data<Capturing>();
				remove_layer(m.l);
				m.f(c.release<Capturing>(), true, m.t->text.v);
			}, Capture().absorb(&capture, _capture));
			e_button(L"Cancel", [](Capture& c) {
				auto& m = c.data<Capturing>();
				remove_layer(m.l);
				m.f(c.release<Capturing>(), false, nullptr);
			}, Capture().absorb(&capture, _capture));
			f_free(_capture._data);
			e_end_layout();
			e_end_dialog();
			return e;
		}
	};
}
