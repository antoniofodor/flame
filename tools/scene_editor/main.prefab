<?xml version="1.0"?>
<prefab>
  <eElement alignx="MinMax" aligny="MinMax" layout_type="Vertical" >
    <cScript>
      ui = entity
      local config = load_ini("config.ini")
      local locations = config["location"]
      last_open = locations["last_open"]
      last_save = locations["last_save"]
    </cScript>
    <eMenuBar>
      <eMenu text="file" >
        <eMenuItem text="open.." >
          <cScript>
            entity.find_component("cReceiver").add_mouse_left_down_listener(function()
              local d = create_entity("prefabs/input_dialog")
              local l = create_entity("prefabs/layer")
              
              d.find_driver("dWindow").set_title("Open")
              local input_dialog = d.find_driver("dInputDialog")
              input_dialog.set_text(last_open)
              input_dialog.add_callback(function(ok, text)
                if ok then
                  if load_scene(text) then 
                    last_open = text
                  end
                end
                l.get_parent().remove_child(l)
              end)
              l.add_child(d)
              ui.add_child(l)
            end)
          </cScript>
        </eMenuItem>
        <eMenuItem text="save as.." >
          <cScript>
            entity.find_component("cReceiver").add_mouse_left_down_listener(function()
              local d = create_entity("prefabs/input_dialog")
              local l = create_entity("prefabs/layer")
              
              d.find_driver("dWindow").set_title("Save As")
              local input_dialog = d.find_driver("dInputDialog")
              input_dialog.set_text(last_save)
              input_dialog.add_callback(function(ok, text)
                if ok then 
                  if save_scene(text) then
                    last_save = text
                  end
                end
                l.get_parent().remove_child(l)
              end)
              l.add_child(d)
              ui.add_child(l)
            end)
          </cScript>
        </eMenuItem>
      </eMenu>
      <eMenu text="shading" >
		    <eMenuItem checkable="true" checked="true" text="solid" >
          <cScript>
            local menu_item = entity.find_driver("dMenuItem")
            entity.find_component("cReceiver").add_mouse_left_down_listener(function()
              s_renderer.set_shade_wireframe(false)
              menu_item.set_single_checked()
            end)
          </cScript>
        </eMenuItem>
		    <eMenuItem checkable="true" text="wireframe" >
          <cScript>
            local menu_item = entity.find_driver("dMenuItem")
            entity.find_component("cReceiver").add_mouse_left_down_listener(function()
              s_renderer.set_shade_wireframe(true)
              menu_item.set_single_checked()
            end)
          </cScript>
        </eMenuItem>
      </eMenu>
      <eMenu text="show" >
		    <eMenuItem checkable="true" text="physics visualization" >
          <cScript>
            local menu_item = entity.find_driver("dMenuItem")
            entity.find_component("cReceiver").add_mouse_left_down_listener(function()
              local checked = menu_item.get_checked()
              checked = not checked
              menu_item.set_checked(checked)
              s_physics.set_visualization(checked)
            end)
          </cScript>
        </eMenuItem>
        <eMenuItem checkable="true" text="ui reflector" >
          <cScript>
            ui_reflector = { p=nil }
              
            local menu_item = entity.find_driver("dMenuItem")
                
            entity.find_component("cReceiver").add_mouse_left_down_listener(function()
              local checked = menu_item.get_checked()
              checked = not checked
              menu_item.set_checked(checked)
              if checked then
                if not ui_reflector.p then
                  ui_reflector = create_entity("ui_reflector")
                  ui.add_child(ui_reflector)
                end
              else
                if ui_reflector.p then
                  ui_reflector.get_parent().remove_child(ui_reflector)
                  ui_reflector.p = nil
                end
              end
            end)
          </cScript>
        </eMenuItem>
        <eMenuItem checkable="true" text="global axes" >
          <cScript>
            local menu_item = entity.find_driver("dMenuItem")
            entity.find_component("cReceiver").add_mouse_left_down_listener(function()
              local checked = menu_item.get_checked()
              checked = not checked
              menu_item.set_checked(checked)
              scene.find_child("hud_global_axes").set_visible(checked)
            end)
          </cScript>
        </eMenuItem>
        <eMenuItem checkable="true" text="crosshair" >
          <cScript>
            local menu_item = entity.find_driver("dMenuItem")
            entity.find_component("cReceiver").add_mouse_left_down_listener(function()
              local checked = menu_item.get_checked()
              checked = not checked
              menu_item.set_checked(checked)
              scene.find_child("hud_crosshair").set_visible(checked)
            end)
          </cScript>
        </eMenuItem>
      </eMenu>
      <eMenu text="tools" >
        <eMenuItem text="scatter vegetations.." >
          <cScript src="scatter_vegetations.lua" />
        </eMenuItem>
      </eMenu>
      <eMenu text="settings" >
        <eMenuItem checkable="true" text="always update" >
          <cScript>
            local menu_item = entity.find_driver("dMenuItem")
            entity.find_component("cReceiver").add_mouse_left_down_listener(function()
              local checked = menu_item.get_checked()
              checked = not checked
              menu_item.set_checked(checked)
            end)
          </cScript>
        </eMenuItem>
      </eMenu>
    </eMenuBar>
    <eElement name="toolbar" layout_type="Horizontal" >
      <eToolButton text="" />
      <eToolButton text="" />
    </eElement>
    <eSplitter type="Horizontal" alignx="MinMax" aligny="MinMax" >
      <eSplitter type="Horizontal" alignx="MinMax" aligny="MinMax" width_factor="8" >
        <eScroller type="Vertical" padding="4,4,4,4" alignx="MinMax" aligny="MinMax" width_factor="2" border="1" >
          <eList name="prefab_list">
            <cScript>
              prefab_list = entity
              
              local prefabs = flame_get_directory_files("prefabs")
              for i=1, #prefabs, 1 do
                  local e = create_entity("prefabs/list_item")
                  e.find_component("cText").set_text(prefabs[i]:gsub("%.prefab", ""))
                  prefab_list.add_child(e)
              end
            </cScript>
          </eList>
        </eScroller>
        <eElement name="scene" alignx="MinMax" aligny="MinMax" width_factor="8" >
          <cReceiver />
          <cScript src="scene" />
          <eElement name="debug" />
          <entity name="hud_global_axes" visible="false" >
            <cElement width="100" height="100" alignx="Max" aligny="Max" fill_color="0,0,0,100" />
            <cScript src="hud_global_axes" />
          </entity>
          <entity name="hud_crosshair" visible="false" >
            <cElement alignx="MinMax" aligny="MinMax" />
            <cScript src="hud_crosshair" />
          </entity>
        </eElement>
      </eSplitter>
      <eSplitter type="Vertical" alignx="MinMax" aligny="MinMax" width_factor="2" >
        <eScroller type="Vertical" padding="4,4,4,4" alignx="MinMax" aligny="MinMax" border="1" >
          <eTree name="hierarchy" padding="4,4,4,4" alignx="MinMax">
            <cScript src="hierarchy.lua" />
          </eTree>
        </eScroller>
        <eScroller type="Vertical" padding="4,4,4,4" alignx="MinMax" aligny="MinMax" border="1">
          <eTree name="inspector" padding="4,4,4,4" alignx="MinMax">
            <cScript src="inspector.lua" />
          </eTree>
        </eScroller>
      </eSplitter>
    </eSplitter>
  </eElement>
</prefab>
