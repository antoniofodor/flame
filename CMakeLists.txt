cmake_minimum_required(VERSION 3.16.4)
include("utils.cmake")
set_property(GLOBAL PROPERTY USE_FOLDERS ON)
add_definitions(-W0 -std:c++latest)

project(flame)

set_output_dir("${CMAKE_SOURCE_DIR}/bin")

string(FIND "${CMAKE_LINKER}" "/VC/" pos)
string(SUBSTRING  "${CMAKE_LINKER}" 0 ${pos} VS_LOCATION)

get_filename_component(parent_dir "${CMAKE_SOURCE_DIR}" DIRECTORY)

check_path("${parent_dir}glm" p)
set(GLM_INCLUDE_DIR "${p}" CACHE PATH "GLM include directory")
if (NOT EXISTS "${GLM_INCLUDE_DIR}")
	message(SEND_ERROR "required GLM is invalid")
endif()

check_path("${parent_dir}pugixml/src" p)
set(PUGIXML_INCLUDE_DIR "${p}" CACHE PATH "Pugi XML directory")
check_path("${parent_dir}pugixml/build/debug/pugixml.lib" p)
set(PUGIXML_DEBUG_LIB "${p}" CACHE FILEPATH "Pugi XML debug LIB Path")
check_path("${parent_dir}pugixml/build/release/pugixml.lib" p)
set(PUGIXML_RELEASE_LIB "${p}" CACHE FILEPATH "Pugi XML release LIB Path")
if (NOT EXISTS "${PUGIXML_INCLUDE_DIR}" OR (NOT EXISTS "${PUGIXML_DEBUG_LIB}" AND NOT EXISTS "${PUGIXML_RELEASE_LIB}"))
	message(SEND_ERROR "required Pugi XML is invalid")
endif()

check_path("${parent_dir}njson/include" p)
set(NJSON_INCLUDE_DIR "${p}" CACHE PATH "NJson include directory")
if (NOT EXISTS "${NJSON_INCLUDE_DIR}")
	message(SEND_ERROR "required NJson is invalid")
endif()

check_path("${parent_dir}cppcodec" p)
set(CPPCODEC_INCLUDE_DIR "${p}" CACHE PATH "cppcodec include directory")
if (NOT EXISTS "${CPPCODEC_INCLUDE_DIR}")
	message(SEND_ERROR "required cppcodec is invalid")
endif()

check_path("${parent_dir}stb" p)
set(STB_INCLUDE_DIR "${p}" CACHE PATH "STB include directory")
if (NOT EXISTS "${STB_INCLUDE_DIR}")
	message(SEND_ERROR "required STB is invalid")
endif()

check_path("${parent_dir}sha1" p)
set(SHA1_INCLUDE_DIR "${p}" CACHE PATH "SHA1 include directory")
if (NOT EXISTS "${SHA1_INCLUDE_DIR}")
	message(STATUS "optional SHA1 is invalid, turn off USE_SHA1")
	set(USE_SHA1 off)
else()
	set(USE_SHA1 on)
endif()

check_path("${parent_dir}/gli" p)
set(GLI_INCLUDE_DIR "${p}" CACHE PATH "GLI include directory")
if (NOT EXISTS "${GLI_INCLUDE_DIR}")
	message(SEND_ERROR "required GLI is invalid")
endif()

check_path("${parent_dir}/SPIRV-Cross" p)
set(SPIRV_CROSS_INCLUDE_DIR "${p}" CACHE PATH "SPIRV Cross include directory")
check_path("${parent_dir}/SPIRV-Cross/build/debug" p)
set(SPIRV_CROSS_DEBUG_LIBS_DIR "${p}" CACHE PATH "SPIRV Cross debug LIBs directory")
check_path("${parent_dir}/SPIRV-Cross/build/release" p)
set(SPIRV_CROSS_RELEASE_LIBS_DIR "${p}" CACHE PATH "SPIRV Cross release LIBs directory")
if (NOT EXISTS "${SPIRV_CROSS_INCLUDE_DIR}" OR (NOT EXISTS "${SPIRV_CROSS_DEBUG_LIBS_DIR}" AND NOT EXISTS "${SPIRV_CROSS_RELEASE_LIBS_DIR}"))
	message(SEND_ERROR "required SPIRV-Cross is invalid")
endif()


check_path("${parent_dir}/assimp/include" p)
set(ASSIMP_INCLUDE_DIR "${p}" CACHE PATH "Assimp include directory")
check_path("${parent_dir}/assimp/build/lib/Debug/assimp-vc143-mtd.lib" p)
set(ASSIMP_LIB_PATH "${p}" CACHE FILEPATH "Assimp LIB Path")
check_path("${parent_dir}/assimp/build/bin/Debug/assimp-vc143-mtd.dll" p)
set(ASSIMP_DLL_PATH "${p}" CACHE FILEPATH "Assimp DLL Path")
if (NOT EXISTS "${ASSIMP_INCLUDE_DIR}" OR NOT EXISTS "${ASSIMP_LIB_PATH}" OR NOT EXISTS "${ASSIMP_DLL_PATH}")
	message(STATUS "optional Assimp is invalid, turn off USE_ASSIMP")
	set(USE_ASSIMP off)
else()
	set(USE_ASSIMP on)
endif()

check_path("${parent_dir}/PhysX" p)
set(PHYSX_INCLUDE_DIR "${p}" CACHE PATH "PhysX directory")
check_path("${parent_dir}/PhysX" p)
set(PHYSX_DEBUG_LIBS_DIR "${p}" CACHE PATH "PhysX debug LIBs directory")
check_path("${parent_dir}/PhysX" p)
set(PHYSX_RELEASE_LIBS_DIR "${p}" CACHE PATH "PhysX release LIBs directory")
if (NOT EXISTS "${PHYSX_INCLUDE_DIR}" OR NOT EXISTS "${PHYSX_DEBUG_LIBS_DIR}" OR NOT EXISTS "${PHYSX_RELEASE_LIBS_DIR}")
	message(STATUS "optional PhysX is invalid, turn off USE_PHYSX")
	set(USE_PHYSX off)
else()
	set(USE_PHYSX on)
endif()

check_path("${parent_dir}/recastnavigation" p)
set(RECASTNAV_DIR "${p}" CACHE PATH "recastnavigation directory")
if (NOT EXISTS "${RECASTNAV_DIR}")
	message(STATUS "optional recastnavigation is invalid, turn off USE_RECASTNAV")
	set(USE_RECASTNAV off)
else()
	set(USE_RECASTNAV on)
endif()

check_path("${parent_dir}/imgui" p)
set(IMGUI_DIR "${p}" CACHE PATH "imgui(docking branch) directory")
if (NOT EXISTS "${IMGUI_DIR}")
	message(STATUS "optional imgui is invalid, turn off USE_IMGUI")
	set(USE_IMGUI off)
else()
	set(USE_IMGUI on)
endif()

check_path("${parent_dir}/ImFileDialog" p)
set(IM_FILE_DIALOG_DIR "${p}" CACHE PATH "ImFileDialog directory")
if (NOT EXISTS "${IM_FILE_DIALOG_DIR}")
	message(STATUS "optional ImFileDialog is invalid, turn off USE_IM_FILE_DIALOG")
	set(USE_IM_FILE_DIALOG off)
else()
	set(USE_IM_FILE_DIALOG on)
endif()

check_path("${parent_dir}/ImGuizmo" p)
set(IM_GUIZMO_DIR "${p}" CACHE PATH "ImGuizmo directory")
if (NOT EXISTS "${IM_GUIZMO_DIR}")
	message(STATUS "optional ImGuizmo is invalid, turn off USE_IM_GUIZMO")
	set(USE_IM_GUIZMO off)
else()
	set(USE_IM_GUIZMO on)
endif()

check_path("$ENV{ProgramFiles} (x86)/OpenAL 1.1 SDK/include" p)
set(OPENAL_INCLUDE_DIR "${p}" CACHE PATH "OpenAL include directory")
check_path("$ENV{ProgramFiles} (x86)/OpenAL 1.1 SDK/libs/Win64/OpenAL32.lib" p)
set(OPENAL_LIB_PATH "${p}" CACHE FILEPATH "OpenAL LIB Path")
if (NOT EXISTS "${OPENAL_INCLUDE_DIR}" OR NOT EXISTS "${OPENAL_LIB_PATH}")
	message(STATUS "optional OpenAL is invalid, turn off USE_OPENAL")
	set(USE_OPENAL off)
else()
	set(USE_OPENAL on)
endif()

check_path("$ENV{ProgramFiles}/MySQL/MySQL Server 8.0/include" p)
set(MYSQL_INCLUDE_DIR "${p}" CACHE PATH "MySQL include directory")
check_path("$ENV{ProgramFiles}/MySQL/MySQL Server 8.0/lib/libmysql.lib" p)
set(MYSQL_LIB_PATH "${p}" CACHE FILEPATH "MySQL LIB Path")
check_path("$ENV{ProgramFiles}/MySQL/MySQL Server 8.0/lib/libmysql.dll" p)
set(MYSQL_DLL_PATH "${p}" CACHE FILEPATH "MySQL DLL Path")
if (NOT EXISTS "${MYSQL_INCLUDE_DIR}" OR NOT EXISTS "${MYSQL_LIB_PATH}" OR NOT EXISTS "${MYSQL_DLL_PATH}")
	message(STATUS "optional MySQL is invalid, turn off USE_MYSQL")
	set(USE_MYSQL off)
else()
	set(USE_MYSQL on)
endif()

add_subdirectory(source)
add_subdirectory(tests)
add_subdirectory(tools)
