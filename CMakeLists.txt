cmake_minimum_required(VERSION 3.25.0)
project(flame LANGUAGES CXX CSharp)

include("utils.cmake")
set_property(GLOBAL PROPERTY USE_FOLDERS ON)
add_definitions(-W0 -std:c++latest)

set_output_dir("${CMAKE_SOURCE_DIR}/bin")

string(FIND "${CMAKE_LINKER}" "/VC/" pos)
string(SUBSTRING  "${CMAKE_LINKER}" 0 ${pos} VS_LOCATION)

get_filename_component(parent_dir "${CMAKE_SOURCE_DIR}" DIRECTORY)

check_path("${parent_dir}/glm" p)
set(GLM_INCLUDE_DIR "${p}" CACHE PATH "GLM include directory")
if(NOT EXISTS "${GLM_INCLUDE_DIR}")
	message(SEND_ERROR "required GLM is invalid")
endif()

check_path("${parent_dir}/pugixml/src" p)
set(PUGIXML_INCLUDE_DIR "${p}" CACHE PATH "Pugi XML directory")
check_path("${parent_dir}/pugixml/build/debug/pugixml.lib" p)
set(PUGIXML_DEBUG_LIB "${p}" CACHE FILEPATH "Pugi XML debug LIB path")
check_path("${parent_dir}/pugixml/build/release/pugixml.lib" p)
set(PUGIXML_RELEASE_LIB "${p}" CACHE FILEPATH "Pugi XML release LIB path")
if(NOT EXISTS "${PUGIXML_INCLUDE_DIR}" OR (NOT EXISTS "${PUGIXML_DEBUG_LIB}" AND NOT EXISTS "${PUGIXML_RELEASE_LIB}"))
	message(SEND_ERROR "required Pugi XML is invalid")
endif()

check_path("${parent_dir}/njson/include" p)
set(NJSON_INCLUDE_DIR "${p}" CACHE PATH "NJson include directory")
if(NOT EXISTS "${NJSON_INCLUDE_DIR}")
	message(SEND_ERROR "required NJson is invalid")
endif()

check_path("${parent_dir}/cppcodec" p)
set(CPPCODEC_INCLUDE_DIR "${p}" CACHE PATH "cppcodec include directory")
if(NOT EXISTS "${CPPCODEC_INCLUDE_DIR}")
	message(SEND_ERROR "required cppcodec is invalid")
endif()

check_path("${parent_dir}/stb" p)
set(STB_INCLUDE_DIR "${p}" CACHE PATH "STB include directory")
if(NOT EXISTS "${STB_INCLUDE_DIR}")
	message(SEND_ERROR "required STB is invalid")
endif()

check_path("${parent_dir}/msdfgen" p)
set(MSDFGEN_INCLUDE_DIR "${p}" CACHE PATH "msdfgen include directory")
check_path("${parent_dir}/msdfgen/build/debug/msdfgen-core.lib" p)
set(MSDFGEN_LIB_PATH "${p}" CACHE FILEPATH "msdfgen LIB path")
if(NOT EXISTS "${MSDFGEN_INCLUDE_DIR}" OR NOT EXISTS "${MSDFGEN_LIB_PATH}")
	message(STATUS "optional msdfgen is invalid, turn off USE_MSDFGEN")
	set(USE_MSDFGEN off)
else()
	set(USE_MSDFGEN on)
endif()

check_path("${parent_dir}/sha1" p)
set(SHA1_INCLUDE_DIR "${p}" CACHE PATH "SHA1 include directory")
if(NOT EXISTS "${SHA1_INCLUDE_DIR}")
	message(STATUS "optional SHA1 is invalid, turn off USE_SHA1")
	set(USE_SHA1 off)
else()
	set(USE_SHA1 on)
endif()

check_path("${parent_dir}/gli" p)
set(GLI_INCLUDE_DIR "${p}" CACHE PATH "GLI include directory")
if(NOT EXISTS "${GLI_INCLUDE_DIR}")
	message(SEND_ERROR "required GLI is invalid")
endif()

check_path("C:/Program Files/NVIDIA Corporation/NVIDIA Texture Tools/include" p)
set(NVTT_INCLUDE_DIR "${p}" CACHE PATH "NVIDIA Texture Tools include directory")
check_path("C:/Program Files/NVIDIA Corporation/NVIDIA Texture Tools/lib/x64-v142/nvtt30106.lib" p)
set(NVTT_LIB_PATH "${p}" CACHE FILEPATH "NVIDIA Texture Tools LIB path")
check_path("C:/Program Files/NVIDIA Corporation/NVIDIA Texture Tools/nvtt30106.dll" p)
set(NVTT_DLL_PATH "${p}" CACHE FILEPATH "NVIDIA Texture Tools DLL path")
check_path("C:/Program Files/NVIDIA Corporation/NVIDIA Texture Tools/cudart64_110.dll" p)
set(NVTT_CUDA_DLL_PATH "${p}" CACHE FILEPATH "NVIDIA Texture Tools CUDA DLL path")
if(NOT EXISTS "${NVTT_INCLUDE_DIR}" OR NOT EXISTS "${NVTT_LIB_PATH}" OR NOT EXISTS "${NVTT_DLL_PATH}" OR NOT EXISTS "${NVTT_CUDA_DLL_PATH}")
	message(STATUS "optional NVIDIA Texture Tools is invalid, turn off USE_NVTT")
	set(USE_NVTT off)
else()
	set(USE_NVTT on)
endif()

check_path("${parent_dir}/SPIRV-Cross" p)
set(SPIRV_CROSS_INCLUDE_DIR "${p}" CACHE PATH "SPIRV Cross include directory")
check_path("${parent_dir}/SPIRV-Cross/build/debug" p)
set(SPIRV_CROSS_DEBUG_LIBS_DIR "${p}" CACHE PATH "SPIRV Cross debug LIBs directory")
check_path("${parent_dir}/SPIRV-Cross/build/release" p)
set(SPIRV_CROSS_RELEASE_LIBS_DIR "${p}" CACHE PATH "SPIRV Cross release LIBs directory")
if(NOT EXISTS "${SPIRV_CROSS_INCLUDE_DIR}" OR (NOT EXISTS "${SPIRV_CROSS_DEBUG_LIBS_DIR}" AND NOT EXISTS "${SPIRV_CROSS_RELEASE_LIBS_DIR}"))
	message(SEND_ERROR "required SPIRV-Cross is invalid")
endif()

check_path("${parent_dir}/assimp/include" p)
set(ASSIMP_INCLUDE_DIR "${p}" CACHE PATH "Assimp include directory")
check_path("${parent_dir}/assimp/build/lib/Debug/assimp-vc143-mtd.lib" p)
if(p STREQUAL "")
check_path("${parent_dir}/assimp/build/lib/Debug/assimp-vc142-mtd.lib" p)
endif()
set(ASSIMP_LIB_PATH "${p}" CACHE FILEPATH "Assimp LIB path")
check_path("${parent_dir}/assimp/build/bin/Debug/assimp-vc143-mtd.dll" p)
if(p STREQUAL "")
check_path("${parent_dir}/assimp/build/bin/Debug/assimp-vc142-mtd.dll" p)
endif()
set(ASSIMP_DLL_PATH "${p}" CACHE FILEPATH "Assimp DLL path")
if(NOT EXISTS "${ASSIMP_INCLUDE_DIR}" OR NOT EXISTS "${ASSIMP_LIB_PATH}" OR NOT EXISTS "${ASSIMP_DLL_PATH}")
	message(STATUS "optional Assimp is invalid, turn off USE_ASSIMP")
	set(USE_ASSIMP off)
else()
	set(USE_ASSIMP on)
endif()

check_path("C:/Program Files/Autodesk/FBX/FBX SDK/2020.2.1/include" p)
set(FBXSDK_INCLUDE_DIR "${p}" CACHE PATH "FBX SDK include directory")
check_path("C:/Program Files/Autodesk/FBX/FBX SDK/2020.2.1/lib/vs2019/x64/debug/libfbxsdk.lib" p)
set(FBXSDK_LIB_PATH "${p}" CACHE FILEPATH "FBX SDK LIB path")
check_path("C:/Program Files/Autodesk/FBX/FBX SDK/2020.2.1/lib/vs2019/x64/debug/libfbxsdk.dll" p)
set(FBXSDK_DLL_PATH "${p}" CACHE FILEPATH "FBX SDK DLL Path")
if(NOT EXISTS "${FBXSDK_INCLUDE_DIR}" OR NOT EXISTS "${FBXSDK_LIB_PATH}" OR NOT EXISTS "${FBXSDK_DLL_PATH}")
	message(STATUS "optional FBX SDK is invalid, turn off USE_FBXSDK")
	set(USE_FBXSDK off)
else()
	set(USE_FBXSDK on)
endif()

check_path("${parent_dir}/PhysX" p)
set(PHYSX_INCLUDE_DIR "${p}" CACHE PATH "PhysX include directory")
check_path("${parent_dir}/PhysX" p)
set(PHYSX_DEBUG_LIBS_DIR "${p}" CACHE PATH "PhysX debug LIBs directory")
check_path("${parent_dir}/PhysX" p)
set(PHYSX_RELEASE_LIBS_DIR "${p}" CACHE PATH "PhysX release LIBs directory")
if(NOT EXISTS "${PHYSX_INCLUDE_DIR}" OR (NOT EXISTS "${PHYSX_DEBUG_LIBS_DIR}" AND NOT EXISTS "${PHYSX_RELEASE_LIBS_DIR}"))
	message(STATUS "optional PhysX is invalid, turn off USE_PHYSX")
	set(USE_PHYSX off)
else()
	set(USE_PHYSX on)
endif()

check_path("${parent_dir}/recastnavigation/Detour/Include" p)
set(DETOUR_INCLUDE_DIR "${p}" CACHE PATH "Detour include directory")
check_path("${parent_dir}/recastnavigation/build/Detour/Debug/Detour-d.lib" p)
set(DETOUR_DEBUG_LIB_PATH "${p}" CACHE FILEPATH "Detour debug LIB path")
check_path("${parent_dir}/recastnavigation/build/Detour/Release/Detour.lib" p)
set(DETOUR_RELEASE_LIB_PATH "${p}" CACHE FILEPATH "Detour release LIB path")
check_path("${parent_dir}/recastnavigation/DetourCrowd/Include" p)
set(DETOUR_CROWD_INCLUDE_DIR "${p}" CACHE PATH "DetourCrowd include directory")
check_path("${parent_dir}/recastnavigation/build/DetourCrowd/Debug/DetourCrowd-d.lib" p)
set(DETOUR_CROWD_DEBUG_LIB_PATH "${p}" CACHE FILEPATH "DetourCrowd debug LIB path")
check_path("${parent_dir}/recastnavigation/build/DetourCrowd/Release/DetourCrowd.lib" p)
set(DETOUR_CROWD_RELEASE_LIB_PATH "${p}" CACHE FILEPATH "DetourCrowd release LIB path")
check_path("${parent_dir}/recastnavigation/DetourTileCache/Include" p)
set(DETOUR_TILE_CACHE_INCLUDE_DIR "${p}" CACHE PATH "DetourTileCache include directory")
check_path("${parent_dir}/recastnavigation/build/DetourTileCache/Debug/DetourTileCache-d.lib" p)
set(DETOUR_TILE_CACHE_DEBUG_LIB_PATH "${p}" CACHE FILEPATH "DetourTileCache debug LIB path")
check_path("${parent_dir}/recastnavigation/build/DetourTileCache/Release/DetourTileCache.lib" p)
set(DETOUR_TILE_CACHE_RELEASE_LIB_PATH "${p}" CACHE FILEPATH "DetourTileCache release LIB path")
check_path("${parent_dir}/recastnavigation/Recast/Include" p)
set(RECAST_INCLUDE_DIR "${p}" CACHE PATH "Recast include directory")
check_path("${parent_dir}/recastnavigation/build/Recast/Debug/Recast-d.lib" p)
set(RECAST_DEBUG_LIB_PATH "${p}" CACHE FILEPATH "Recast debug LIB path")
check_path("${parent_dir}/recastnavigation/build/Recast/Release/Recast.lib" p)
set(RECAST_RELEASE_LIB_PATH "${p}" CACHE FILEPATH "Recast release LIB path")
if(NOT EXISTS "${DETOUR_INCLUDE_DIR}" OR NOT EXISTS "${DETOUR_CROWD_INCLUDE_DIR}" OR NOT EXISTS "${DETOUR_TILE_CACHE_INCLUDE_DIR}" OR NOT EXISTS "${RECAST_INCLUDE_DIR}" OR 
	(NOT EXISTS "${DETOUR_DEBUG_LIB_PATH}" AND NOT EXISTS "${DETOUR_RELEASE_LIB_PATH}") OR (NOT EXISTS "${DETOUR_CROWD_DEBUG_LIB_PATH}" AND NOT EXISTS "${DETOUR_CROWD_RELEASE_LIB_PATH}") OR
	(NOT EXISTS "${DETOUR_TILE_CACHE_DEBUG_LIB_PATH}" AND NOT EXISTS "${DETOUR_TILE_CACHE_RELEASE_LIB_PATH}") OR (NOT EXISTS "${RECAST_DEBUG_LIB_PATH}" AND NOT EXISTS "${RECAST_RELEASE_LIB_PATH}"))
	message(STATUS "optional Recastnavigation is invalid, turn off USE_RECASTNAV")
	set(USE_RECASTNAV off)
else()
	set(USE_RECASTNAV on)
endif()

check_path("${parent_dir}/Font-Awesome" p)
set(FONT_AWESOME_DIR "${p}" CACHE PATH "Font-Awesome directory")
if(NOT EXISTS "${FONT_AWESOME_DIR}")
	message(STATUS "optional font-awesome is invalid, turn off USE_FONT_AWESOME")
	set(USE_FONT_AWESOME off)
else()
	set(USE_FONT_AWESOME on)
endif()

check_path("${parent_dir}/imgui" p)
set(IMGUI_DIR "${p}" CACHE PATH "imgui(docking branch) directory")
if(NOT EXISTS "${IMGUI_DIR}")
	message(STATUS "optional imgui is invalid, turn off USE_IMGUI")
	set(USE_IMGUI off)
else()
	set(USE_IMGUI on)
endif()

check_path("${parent_dir}/ImGuizmo" p)
set(IM_GUIZMO_DIR "${p}" CACHE PATH "ImGuizmo directory")
if(NOT EXISTS "${IM_GUIZMO_DIR}")
	message(STATUS "optional ImGuizmo is invalid, turn off USE_IM_GUIZMO")
	set(USE_IM_GUIZMO off)
else()
	set(USE_IM_GUIZMO on)
endif()

check_path("${parent_dir}/FortuneAlgorithm" p)
set(FORTUNE_ALGORITHM_DIR "${p}" CACHE PATH "FortuneAlgorithm directory")
if(NOT EXISTS "${FORTUNE_ALGORITHM_DIR}")
	message(STATUS "optional FortuneAlgorithm is invalid, turn off USE_FORTUNE_ALGORITHM")
	set(USE_FORTUNE_ALGORITHM off)
else()
	set(USE_FORTUNE_ALGORITHM on)
endif()

check_path("$ENV{ProgramFiles} (x86)/OpenAL 1.1 SDK/include" p)
set(OPENAL_INCLUDE_DIR "${p}" CACHE PATH "OpenAL include directory")
check_path("$ENV{ProgramFiles} (x86)/OpenAL 1.1 SDK/libs/Win64/OpenAL32.lib" p)
set(OPENAL_LIB_PATH "${p}" CACHE FILEPATH "OpenAL LIB path")
if(NOT EXISTS "${OPENAL_INCLUDE_DIR}" OR NOT EXISTS "${OPENAL_LIB_PATH}")
	message(STATUS "optional OpenAL is invalid, turn off USE_OPENAL")
	set(USE_OPENAL off)
else()
	set(USE_OPENAL on)
endif()

check_path("$ENV{ProgramFiles}/MySQL/MySQL Server 8.0/include" p)
set(MYSQL_INCLUDE_DIR "${p}" CACHE PATH "MySQL include directory")
check_path("$ENV{ProgramFiles}/MySQL/MySQL Server 8.0/lib/libmysql.lib" p)
set(MYSQL_LIB_PATH "${p}" CACHE FILEPATH "MySQL LIB path")
check_path("$ENV{ProgramFiles}/MySQL/MySQL Server 8.0/lib/libmysql.dll" p)
set(MYSQL_DLL_PATH "${p}" CACHE FILEPATH "MySQL DLL Path")
if(NOT EXISTS "${MYSQL_INCLUDE_DIR}" OR NOT EXISTS "${MYSQL_LIB_PATH}" OR NOT EXISTS "${MYSQL_DLL_PATH}")
	message(STATUS "optional MySQL is invalid, turn off USE_MYSQL")
	set(USE_MYSQL off)
else()
	set(USE_MYSQL on)
endif()

check_path("C:\\Program Files\\RenderDoc" p)
set(RENDERDOC_DIR "${p}" CACHE PATH "RenderDoc directory")
if(NOT EXISTS "${RENDERDOC_DIR}")
	set(HAS_RENDERDOC off)
else()
	set(HAS_RENDERDOC on)
endif()

set(USE_UNIVERSE_MODULE on CACHE BOOL "Use Flame Universe Module")

add_subdirectory(source)
add_subdirectory(tests)
add_subdirectory(tools)
