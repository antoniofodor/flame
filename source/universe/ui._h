namespace flame
{
	struct UI
	{
		inline Entity* e_drag_edit()
		{
			auto e = e_begin_layout(LayoutVertical);
			e->get_component(cLayout)->fence = 1;

			auto ee = e_edit(50.f);
			ee->set_visible(false);
			push_style(ButtonColorNormal, common(style(FrameColorNormal).c));
			push_style(ButtonColorHovering, common(style(FrameColorHovering).c));
			push_style(ButtonColorActive, common(style(FrameColorActive).c));
			auto ed = e_button(L"");
			pop_style(ButtonColorNormal);
			pop_style(ButtonColorHovering);
			pop_style(ButtonColorActive);

			e_end_layout();

			struct Capturing
			{
				Entity* ee;
				Entity* ed;
			}capture;
			capture.ee = ee;
			capture.ed = ed;

			ee->get_component(cEventReceiver)->focus_listeners.add([](Capture& c, bool focusing) {
				auto& capture = c.data<Capturing>();
				if (!focusing)
				{
					capture.ee->set_visible(false);
					capture.ed->set_visible(true);
				}
				return true;
			}, Capture().set_data(&capture));

			ed->get_component(cEventReceiver)->mouse_listeners.add([](Capture& c, KeyStateFlags action, MouseKey key, const Vec2i& pos) {
				auto& capture = c.data<Capturing>();
				if (is_mouse_clicked(action, key) && pos == 0)
				{
					capture.ee->set_visible(true);
					capture.ed->set_visible(false);
					c.current<cEventReceiver>()->dispatcher->next_focusing = capture.ee->get_component(cEventReceiver);
				}
				return true;
			}, Capture().set_data(&capture));

			return e;
		}

		inline Entity* e_begin_docker_floating_container()
		{
			auto e = e_empty();
			cDockerTab::make_floating_container(current_root->world, e, next_element_pos, next_element_size);
			next_element_pos = next_element_size = 0.f;
			parents.push(e);
			return e;
		}

		inline Entity* e_begin_docker_static_container()
		{
			auto e = e_empty();
			cDockerTab::make_static_container(current_root->world, e);
			parents.push(e);
			return e;
		}

		inline Entity* e_begin_docker_layout(LayoutType type)
		{
			auto e = e_empty();
			cDockerTab::make_layout(current_root->world, e, type);
			parents.push(e);
			return e;
		}

		inline Entity* e_begin_docker()
		{
			auto e = e_empty();
			cDockerTab::make_docker(current_root->world, e);
			parents.push(e);
			return e;
		}

		inline std::pair<Entity*, Entity*> e_begin_docker_page(const wchar_t* title, void(*on_close)(Capture& c) = nullptr, const Capture& _close_capture = Capture())
		{
			parents.push(parents.top()->children[0]);
			auto et = e_empty();
			et->name = "docker_tab";
			c_element()->padding = Vec4f(4.f, 2.f, style(FontSize).u.x() + 6.f, 2.f);
			c_text()->set_text(title);
			c_event_receiver();
			auto csb = c_style_color2();
			csb->color_normal[0] = style(TabColorNormal).c;
			csb->color_hovering[0] = style(TabColorElse).c;
			csb->color_active[0] = style(TabColorElse).c;
			csb->color_normal[1] = style(SelectedTabColorNormal).c;
			csb->color_hovering[1] = style(SelectedTabColorElse).c;
			csb->color_active[1] = style(SelectedTabColorElse).c;
			csb->style();
			auto cst = c_style_text_color2();
			cst->color_normal[0] = style(TabTextColorNormal).c;
			cst->color_else[0] = style(TabTextColorElse).c;
			cst->color_normal[1] = style(SelectedTabTextColorNormal).c;
			cst->color_else[1] = style(SelectedTabTextColorElse).c;
			cst->style();
			c_list_item();
			c_layout();
			auto cdt = c_docker_tab();
			cdt->root = current_root;
			parents.push(et);
			{
				struct Capturing
				{
					cDockerTab* t;
					void(*f)(Capture&);
				}capture;
				capture.t = cdt;
				capture.f = on_close;
				push_style(TextColorNormal, common(style(TabTextColorElse).c));
				e_button(Icon_TIMES, [](Capture& c) {
					auto& capture = c.data<Capturing>();
					if (capture.f)
						capture.f(c.release<Capturing>());
					looper().add_event([](Capture& c) {
						c.data<cDockerTab*>()->take_away(true);
					}, Capture().set_data(&capture.t));
				}, Capture().absorb(&capture, _close_capture, true), false);
				c_aligner(AlignMax | AlignAbsolute, 0);
				pop_style(TextColorNormal);
			}
			parents.pop();
			parents.pop();
			parents.push(parents.top()->children[1]);
			auto ep = e_empty();
			{
				auto ce = c_element();
				ce->color = style(BackgroundColor).c;
				ce->clip_flags = ClipChildren;
				c_aligner(AlignMinMax, AlignMinMax);
			}
			parents.pop();
			parents.push(ep);
			return std::make_pair(et, ep);
		}

		inline Entity* e_message_dialog(const wchar_t* message)
		{
			auto e = e_begin_dialog();
			auto l = e->parent;
			e_text(message);
			e_button(L"OK", [](Capture& c) {
				remove_layer(c.thiz<Entity>());
			}, Capture().set_thiz(l));
			c_aligner(AlignMiddle, 0);
			e_end_dialog();
			return e;
		}

		inline Entity* e_confirm_dialog(const wchar_t* title, void (*callback)(Capture& c, bool yes), const Capture& _capture)
		{
			auto e = e_begin_dialog();
			auto l = e->parent;
			e_text(title);
			e_begin_layout(LayoutHorizontal, 4.f);
			c_aligner(AlignMiddle, 0);
			struct Capturing
			{
				Entity* l;
				void(*f)(Capture&, bool);
			}capture;
			capture.l = l;
			capture.f = callback;
			e_button(L"OK", [](Capture& c) {
				auto& m = c.data<Capturing>();
				remove_layer(m.l);
				m.f(c.release<Capturing>(), true);
			}, Capture().absorb(&capture, _capture));
			e_button(L"Cancel", [](Capture& c) {
				auto& m = c.data<Capturing>();
				remove_layer(m.l);
				m.f(c.release<Capturing>(), false);
			}, Capture().absorb(&capture, _capture));
			f_free(_capture._data);
			e_end_layout();
			e_end_dialog();
			return e;
		}
	};
}
