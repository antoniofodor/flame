#pragma once

#include "../system.h"

namespace flame
{
	struct sRenderer : System
	{
		virtual void set_shadow_props(uint dir_levels, float dir_dist, float pt_dist) = 0;
		virtual void set_ssao_props(float radius, float bias) = 0;

		virtual graphics::ImageView* get_element_res(uint idx) const = 0;
		virtual int set_element_res(int idx, graphics::ImageView* iv, graphics::Sampler* sp) = 0;
		virtual int find_element_res(graphics::ImageView* iv) const = 0;

		virtual void fill(uint layer, uint pt_cnt, const vec2* pts, const cvec4& color) = 0;
		virtual void stroke(uint layer, uint pt_cnt, const vec2* pts, float thickness, const cvec4& color, bool closed = false) = 0;
		virtual void draw_glyphs(uint layer, uint cnt, const graphics::GlyphDraw* glyphs, uint res_id, const cvec4& color) = 0;
		virtual void draw_image(uint layer, const vec2* pts, uint res_id, const vec4& uvs, const cvec4& tint_color) = 0;

		virtual int set_texture_res(int idx, graphics::ImageView* tex, graphics::Sampler* sp) = 0;
		virtual int find_texture_res(graphics::ImageView* tex) const = 0;

		virtual void* get_sky_id() = 0;
		virtual void set_sky(graphics::ImageView* box, graphics::ImageView* irr,
			graphics::ImageView* rad, graphics::ImageView* lut, const vec3& fog_color, float intensity, void* id) = 0;

		virtual uint add_light(const mat4& mat, LightType type, const vec3& color, bool cast_shadow) = 0;
		virtual void draw_water(const vec3& coord, const vec2& extent, uint material_id, ShadingFlags flags = ShadingMaterial) = 0;
		virtual void draw_particles(uint count, graphics::Particle* partcles, uint res_id) = 0;

		virtual void draw_lines(uint count, graphics::Line* lines) = 0;
	};
}
