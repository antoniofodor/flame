namespace flame
{
	struct ElementDrawCmd
	{
		uint res;
		std::vector<ElementVertex> vertices;
		std::vector<uint> indices;
		Rect scissor;
	};

	struct ElemenetRenderData
	{
		std::vector<ImageView*> reses;

		Rect						scissor;
		std::vector<ElementDrawCmd> layers[128];
		uint						max_layer = 0;

		SequentialBuffer<ElementVertex>	buf_vtx;
		SequentialBuffer<uint>			buf_idx;
		std::unique_ptr<DescriptorSet>	ds_element;

		Pipeline* pl_element;
	};

	struct NodeRenderData
	{
		std::vector<std::pair<uint, mat3>>				dir_shadows;
		std::vector<std::pair<uint, vec3>>				pt_shadows;
		std::vector<std::pair<uint, uint>>				waters[MaterialTypeCount];
		std::vector<std::pair<uint, uint>>				particles;

		SequentialArrayStorageBuffer<water::DSL_water::WaterInfos>			buf_water;
		std::unique_ptr<DescriptorSet>										ds_water;

		std::unique_ptr<Image> img_ao_back;
		std::unique_ptr<Image> img_col_ms;
		std::unique_ptr<Image> img_dep_ms;
		std::unique_ptr<Image> img_dst_back;
		std::unique_ptr<Image> img_dep_back;

		std::unique_ptr<Framebuffer> fb_fwd_ms4;

		std::vector<MaterialPipeline> pl_mats[MaterialUsageCount];

		StorageBuffer<DSL_ssao::SampleLocations>	buf_ssao_loc;
		StorageBuffer<DSL_ssao::SampleNoises>		buf_ssao_noi;
		Pipeline*									pl_ssao;
		Pipeline*									pl_ssao_blur;
		std::unique_ptr<DescriptorSet>				ds_ssao;

		SequentialBuffer<ParticleVertex>	buf_ptc_vtx;
		Pipeline* pl_ptc;

		Pipeline* pl_bright;
	};

	uint sRendererPrivate::element_render(uint layer, cElementPrivate* element)
	{
		auto& ed = *_ed;

		auto e = element->entity;

		if (element->layer_policy == 2)
			element->layer_policy = 0;

		element->parent_scissor = ed.scissor;
		auto culled = !ed.scissor.overlapping(element->bounds);
		if (element->culled != culled)
		{
			element->culled = culled;
			element->data_changed("culled"_h);
		}
		if (culled)
			return layer;

		auto self_transparent = true;
		if (!element->draw(layer))
			self_transparent = false;

		auto clipping = false;
		Rect last_scissor;
		if (element->clipping && !(ed.scissor == element->bounds))
		{
			element->layer_policy = 2;

			clipping = true;
			last_scissor = ed.scissor;
			ed.scissor = element->bounds;
			layer = ed.max_layer;
			auto& info = ed.layers[layer].emplace_back();
			info.scissor = ed.scissor;
		}

		if (!element->drawers.empty())
		{
			auto l = layer;
			for (auto d : element->drawers)
				layer = max(layer, d->draw(l, this));
			self_transparent = false;
		}

		if (!self_transparent)
			layer++;
		ed.max_layer = max(ed.max_layer, layer);
		auto children_max_layer = layer;
		for (auto& c : e->children)
		{
			if (!c->global_visibility)
				continue;

			auto celement = c->get_component_i<cElementT>(0);
			if (celement)
			{
				children_max_layer = max(children_max_layer, element_render(layer, celement));
				if (celement->layer_policy > 0)
				{
					layer = children_max_layer;
					if (celement->layer_policy == 2)
						element->layer_policy = 2;
				}
			}
		}

		if (clipping)
		{
			ed.scissor = last_scissor;
			auto& info = ed.layers[children_max_layer].emplace_back();
			info.scissor = last_scissor;
		}

		return max(layer, children_max_layer);
	}

	void sRendererPrivate::set_targets(const std::vector<ImageView*>& views)
	{
		nd.img_ao.reset(Image::create(nullptr, Format_R8_UNORM, hf_tar_sz, 1, 1,
			SampleCount_1, ImageUsageSampled | ImageUsageAttachment));
		nd.img_col_ms.reset(Image::create(nullptr, Format_R16G16B16A16_SFLOAT, tar_sz, 1, 1,
			MsaaSampleCount, ImageUsageAttachment));
		nd.img_dep_ms.reset(Image::create(nullptr, Format_Depth16, tar_sz, 1, 1,
			MsaaSampleCount, ImageUsageAttachment));
		nd.img_dst_back.reset(Image::create(nullptr, Format_R16G16B16A16_SFLOAT, tar_sz, 0, 1,
			SampleCount_1, ImageUsageSampled | ImageUsageAttachment));
		nd.img_dep_back.reset(Image::create(nullptr, Format_Depth16, tar_sz, 1, 1,
			SampleCount_1, ImageUsageSampled | ImageUsageAttachment | ImageUsageTransferDst));
		nd.img_dep_back->change_layout(ImageLayoutUndefined, ImageLayoutShaderReadOnly);
		nd.img_ao_back.reset(Image::create(nullptr, Format_R8_UNORM, hf_tar_sz, 1, 1,
			SampleCount_1, ImageUsageSampled | ImageUsageAttachment));

		{
			ImageView* vs[] = {
				nd.img_col_met->get_view(),
				nd.img_nor_rou->get_view(),
				nd.img_dep->get_view()
			};
			nd.fb_gbuf.reset(Framebuffer::create(Renderpass::get(nullptr, L"gbuffer.rp"), countof(vs), vs));
		}

		{
			ImageView* vs[] = {
				nd.img_col_ms->get_view(),
				nd.img_dep_ms->get_view(),
				img_dst->get_view()
			};
			nd.fb_fwd_ms4.reset(Framebuffer::create(Renderpass::get(nullptr, L"forward_ms4.rp"), countof(vs), vs));
		}

		nd.ds_ssao->set_image(DSL_ssao::img_nor_rou_binding, 0, nd.img_nor_rou->get_view(), sp_nearest);
		nd.ds_ssao->set_image(DSL_ssao::img_dep_binding, 0, nd.img_dep->get_view(), sp_nearest);
		nd.ds_ssao->update();

		nd.ds_water->set_image(water::DSL_water::img_depth_binding, 0, nd.img_dep_back->get_view(), sp_nearest);
		nd.ds_water->update();

		nd.ds_lum->set_image(DSL_luminance::img_col_binding, 0, img_dst->get_view(), nullptr);
		nd.ds_lum->update();

		nd.ds_tone->set_image(DSL_tone::image_binding, 0, img_dst->get_view(), sp_nearest);
		nd.ds_tone->update();
	}

	int sRendererPrivate::set_element_res(int idx, ImageView* iv, Sampler* sp)
	{
		auto iv_white = img_white->get_view();
		auto& ed = *_ed;

		if (!iv)
			iv = iv_white;

		if (idx == -1)
		{
			for (auto i = 1; i < ed.reses.size(); i++)
			{
				if (ed.reses[i] == iv_white)
				{
					idx = i;
					break;
				}
			}
		}
		if (idx == -1)
			return -1;

		ed.reses[idx] = iv;
		ed.ds_element->set_image(DescriptorSetLayout::get(nullptr, L"element/element.dsl")
			->find_binding("images"), idx, iv, sp ? sp : sp_linear);
		ed.ds_element->update();

		return idx;
	}

	int sRendererPrivate::find_element_res(ImageView* iv) const
	{
		auto& ed = *_ed;
		for (auto i = 0; i < ed.reses.size(); i++)
		{
			if (ed.reses[i] == iv)
				return i;
		}
		return -1;
	}

	void sRendererPrivate::fill(uint layer, uint pt_cnt, const vec2* pts, const cvec4& color)
	{
		if (pt_cnt == 0)
			return;

		auto& ed = *_ed;

		auto vtx_cnt = 3 * (pt_cnt - 2);
		auto idx_cnt = vtx_cnt;
		ed.buf_vtx.stag_num += vtx_cnt;
		ed.buf_idx.stag_num += idx_cnt;

		auto& info = ed.layers[layer].emplace_back();
		info.res = 0;
		info.vertices.resize(vtx_cnt);
		info.indices.resize(idx_cnt);

		auto off = 0;
		for (auto i = 0; i < pt_cnt - 2; i++)
		{
			info.vertices[off + 0] = { pts[0],		vec2(0.5f), color };
			info.vertices[off + 1] = { pts[i + 1],	vec2(0.5f), color };
			info.vertices[off + 2] = { pts[i + 2],	vec2(0.5f), color };

			info.indices[off + 0] = off + 0;
			info.indices[off + 1] = off + 2;
			info.indices[off + 2] = off + 1;

			off += 3;
		}
	}

	void sRendererPrivate::stroke(uint layer, uint pt_cnt, const vec2* pts, float thickness, const cvec4& color, bool closed)
	{
		if (pt_cnt == 0)
			return;

		auto& ed = *_ed;

		auto vtx_cnt = 2 * pt_cnt;
		auto idx_cnt = 6 * (pt_cnt - 1);
		if (closed)
			idx_cnt += 6;
		ed.buf_vtx.stag_num += vtx_cnt;
		ed.buf_idx.stag_num += idx_cnt;

		auto& info = ed.layers[layer].emplace_back();
		info.res = 0;
		info.vertices.resize(vtx_cnt);
		info.indices.resize(idx_cnt);

		auto get_normal = [](const vec2& p1, const vec2& p2) {
			auto d = normalize(p2 - p1);
			return vec2(d.y, -d.x);
		};

		auto vtx_off = 0;
		auto idx_off = 0;
		vec2 first_normal;
		vec2 last_normal;

		first_normal = last_normal = get_normal(pts[0], pts[1]);
		info.vertices[0] = { pts[0] + first_normal * thickness, vec2(0.5f), color };
		info.vertices[1] = { pts[0] - first_normal * thickness, vec2(0.5f), color };

		vtx_off += 2;
		for (auto i = 1; i < pt_cnt - 1; i++)
		{
			auto _n = get_normal(pts[i], pts[i + 1]);
			auto n = (last_normal + _n) * 0.5f;
			last_normal = _n;
			info.vertices[vtx_off + 0] = { pts[i] + n * thickness, vec2(0.5f), color };
			info.vertices[vtx_off + 1] = { pts[i] - n * thickness, vec2(0.5f), color };

			info.indices[idx_off + 0] = vtx_off - 2;
			info.indices[idx_off + 1] = vtx_off - 1;
			info.indices[idx_off + 2] = vtx_off + 1;
			info.indices[idx_off + 3] = vtx_off - 2;
			info.indices[idx_off + 4] = vtx_off + 1;
			info.indices[idx_off + 5] = vtx_off + 0;

			vtx_off += 2;
			idx_off += 6;
		}

		if (closed)
		{
			auto _n = get_normal(pts[pt_cnt - 1], pts[0]);
			auto n = (last_normal + _n) * 0.5f;

			info.vertices[vtx_off + 0] = { pts[pt_cnt - 1] + n * thickness, vec2(0.5f), color };
			info.vertices[vtx_off + 1] = { pts[pt_cnt - 1] - n * thickness, vec2(0.5f), color };

			info.indices[idx_off + 0] = vtx_off - 2;
			info.indices[idx_off + 1] = vtx_off - 1;
			info.indices[idx_off + 2] = vtx_off + 1;
			info.indices[idx_off + 3] = vtx_off - 2;
			info.indices[idx_off + 4] = vtx_off + 1;
			info.indices[idx_off + 5] = vtx_off + 0;

			vtx_off += 2;
			idx_off += 6;

			n = (_n + first_normal) * 0.5f;

			info.vertices[0] = { pts[0] + n * thickness, vec2(0.5f), color };
			info.vertices[1] = { pts[0] - n * thickness, vec2(0.5f), color };

			info.indices[idx_off + 0] = vtx_off - 2;
			info.indices[idx_off + 1] = vtx_off - 1;
			info.indices[idx_off + 2] = 1;
			info.indices[idx_off + 3] = vtx_off - 2;
			info.indices[idx_off + 4] = 1;
			info.indices[idx_off + 5] = 0;
		}
		else
		{
			info.vertices[vtx_off + 0] = { pts[pt_cnt - 1] + last_normal * thickness, vec2(0.5f), color };
			info.vertices[vtx_off + 1] = { pts[pt_cnt - 1] - last_normal * thickness, vec2(0.5f), color };

			info.indices[idx_off + 0] = vtx_off - 2;
			info.indices[idx_off + 1] = vtx_off - 1;
			info.indices[idx_off + 2] = vtx_off + 1;
			info.indices[idx_off + 3] = vtx_off - 2;
			info.indices[idx_off + 4] = vtx_off + 1;
			info.indices[idx_off + 5] = vtx_off + 0;

			vtx_off += 2;
			idx_off += 6;
		}
	}

	void sRendererPrivate::draw_glyphs(uint layer, uint cnt, const GlyphDraw* glyphs, uint res_id, const cvec4& color)
	{
		if (cnt == 0)
			return;

		auto& ed = *_ed;

		auto vtx_cnt = 4 * cnt;
		auto idx_cnt = 6 * cnt;
		ed.buf_vtx.stag_num += vtx_cnt;
		ed.buf_idx.stag_num += idx_cnt;

		auto& info = ed.layers[layer].emplace_back();
		info.res = res_id;
		info.vertices.resize(vtx_cnt);
		info.indices.resize(idx_cnt);

		auto vtx_off = 0;
		auto idx_off = 0;
		for (auto i = 0; i < cnt; i++)
		{
			auto& g = glyphs[i];

			info.vertices[vtx_off + 0] = { g.points[0],	g.uvs.xy(), color };
			info.vertices[vtx_off + 1] = { g.points[1],	g.uvs.xw(), color };
			info.vertices[vtx_off + 2] = { g.points[2],	g.uvs.zw(), color };
			info.vertices[vtx_off + 3] = { g.points[3],	g.uvs.zy(), color };

			info.indices[idx_off + 0] = vtx_off + 0;
			info.indices[idx_off + 1] = vtx_off + 2;
			info.indices[idx_off + 2] = vtx_off + 1;
			info.indices[idx_off + 3] = vtx_off + 0;
			info.indices[idx_off + 4] = vtx_off + 3;
			info.indices[idx_off + 5] = vtx_off + 2;

			vtx_off += 4;
			idx_off += 6;
		}
	}

	void sRendererPrivate::draw_image(uint layer, const vec2* pts, uint res_id, const vec4& uvs, const cvec4& tint_color)
	{
		auto& ed = *_ed;

		ed.buf_vtx.stag_num += 4;
		ed.buf_idx.stag_num += 6;

		auto& info = ed.layers[layer].emplace_back();
		info.res = res_id;
		info.vertices.resize(4);
		info.indices.resize(6);

		info.vertices[0] = { pts[0], uvs.xy(), tint_color };
		info.vertices[1] = { pts[1], uvs.zy(), tint_color };
		info.vertices[2] = { pts[2], uvs.zw(), tint_color };
		info.vertices[3] = { pts[3], uvs.xw(), tint_color };

		info.indices[0] = 0;
		info.indices[1] = 2;
		info.indices[2] = 1;
		info.indices[3] = 0;
		info.indices[4] = 3;
		info.indices[5] = 2;
	}

	uint sRendererPrivate::add_light(const mat4& mat, LightType type, const vec3& color, bool cast_shadow)
	{
		{
			switch (type)
			{
			case LightPoint:
			{
				auto pos = vec3(mat[3]);
				if (cast_shadow)
				{
					if (nd.pt_shadows.size() < 4)
					{
						data.shadow_index = nd.pt_shadows.size();
						nd.pt_shadows.emplace_back(idx, pos);
					}
				}
			}
			break;
			}
		}

		return idx;
	}

	mat4 sRendererPrivate::get_shaodw_mat(uint id, uint idx) const
	{
		auto& nd = *_nd;

		auto& info = nd.buf_light_infos.pstag->light_infos[id];
		if (info.shadow_index == -1)
			return mat4(1.f);

		switch (info.type)
		{
		case LightDirectional:
			return nd.buf_dir_shadows.pstag->dir_shadows[info.shadow_index].mats[idx];
		case LightPoint:
			return nd.buf_pt_shadows.pstag->pt_shadows[info.shadow_index].mats[idx];
		}

		return mat4(1.f);
	}

	void sRendererPrivate::draw_water(const vec3& coord, const vec2& extent,
		uint material_id, ShadingFlags flags)
	{
		auto& nd = *_nd;

		if (render_type != ShadingMaterial)
			flags = (ShadingFlags)(flags & ~ShadingMaterial);

		auto& data = nd.buf_water.add_item();
		data.coord = coord;
		data.extent = extent;
		data.material_id = material_id;

		if (flags & ShadingMaterial)
			nd.waters[MaterialCustom].emplace_back(0, material_id);
		if (render_type == RenderWireframe || (flags & ShadingWireframe))
			nd.waters[MaterialWireframe].emplace_back(0, material_id);
		if (flags & ShadingOutline)
			nd.waters[MaterialOutline].emplace_back(0, material_id);
		if (render_type == RenderNormalData)
			nd.waters[MaterialNormalData].emplace_back(0, material_id);
	}

	void sRendererPrivate::draw_particles(uint count, Particle* partcles, uint res_id)
	{
		auto& nd = *_nd;

		if (nd.particles.back().first != res_id)
			nd.particles.emplace_back(res_id, 0);

		auto pvtx = nd.buf_ptc_vtx.stag(count);
		for (auto i = 0; i < count; i++)
		{
			auto& p = partcles[i];
			pvtx[i] = { p.pos, p.xext, p.yext, p.uvs, p.col };
		}

		nd.particles.back().second += count;
	}

	void sRendererPrivate::render(uint tar_idx, CommandBuffer* cb)
	{
		auto& ed = *_ed;
		ed.scissor = Rect(vec2(0.f), tar_sz);
		if (world->first_element && world->first_element->global_visibility)
		{
			ed.max_layer = 0;
			element_render(0, world->first_element->get_component_i<cElementT>(0));
		}

		{
			auto bind_water_res = [&]() {
				cb->bind_pipeline_layout(nd.pll_water);
				DescriptorSet* sets[water::PLL_water::Binding_Max];
				sets[water::PLL_water::Binding_render_data] = nd.ds_render_data.get();
				sets[water::PLL_water::Binding_material] = nd.ds_material.get();
				sets[water::PLL_water::Binding_light] = nd.ds_light.get();
				sets[water::PLL_water::Binding_water] = nd.ds_water.get();
				cb->bind_descriptor_sets(0, countof(sets), sets);
			};

			auto draw_waters = [&]() {
				auto& vec = nd.waters[MaterialCustom];
				for (auto i = 0; i < vec.size(); i++)
				{
					cb->bind_pipeline(nd.mat_reses[vec[i].second].get_pl(this, MaterialForWater));
					cb->draw(6, 1, 0, i << 16);
				}
				vec.clear();
			};

			if (render_type == RenderShaded)
			{
				for (auto& s : nd.pt_shadows)
				{
					auto near = 0.1f;

					auto proj = perspective(radians(90.f), near, 1.f, nd.pt_shadow_dist);
					proj[1][1] *= -1.f;

					auto& data = nd.buf_pt_shadows.add_item();

					auto& mesh_indirs_vec = pt_shadow_mesh_indirs.emplace_back();
					auto& mesh_arm_indirs_vec = pt_shadow_mesh_arm_indirs.emplace_back();
					for (auto i = 0; i < 6; i++)
					{
						auto& matrix = data.mats[i];
						switch (i)
						{
						case 0:
							matrix[0][0] = -1.f;
							matrix = matrix * proj * lookAt(s.second, s.second + vec3(1.f, 0.f, 0.f), vec3(0.f, 1.f, 0.f));
							break;
						case 1:
							matrix[0][0] = -1.f;
							matrix = matrix * proj * lookAt(s.second, s.second + vec3(-1.f, 0.f, 0.f), vec3(0.f, 1.f, 0.f));
							break;
						case 2:
							matrix[1][1] = -1.f;
							matrix = matrix * proj * lookAt(s.second, s.second + vec3(0.f, 1.f, 0.f), vec3(1.f, 0.f, 0.f));
							break;
						case 3:
							matrix[1][1] = -1.f;
							matrix = matrix * proj * lookAt(s.second, s.second + vec3(0.f, -1.f, 0.f), vec3(0.f, 0.f, -1.f));
							break;
						case 4:
							matrix[0][0] = -1.f;
							matrix = matrix * proj * lookAt(s.second, s.second + vec3(0.f, 0.f, 1.f), vec3(0.f, 1.f, 0.f));
							break;
						case 5:
							matrix[0][0] = -1.f;
							matrix = matrix * proj * lookAt(s.second, s.second + vec3(0.f, 0.f, -1.f), vec3(0.f, 1.f, 0.f));
							break;
						}

						collect_occluders(world->first_node->get_component_i<cNodeT>(0), Frustum(inverse(matrix)));
						mesh_indirs_vec.push_back(pack_mesh_indirs(MaterialForMeshShadow, true));
						mesh_arm_indirs_vec.push_back(pack_mesh_indirs(MaterialForMeshShadowArmature, true));

					}
					data.near = near;
					data.far = nd.pt_shadow_dist;
				}
			}

			nd.buf_water.upload(cb);
			nd.buf_ptc_vtx.upload(cb);

			if (render_type == RenderShaded)
			{
				cb->set_viewport(Rect(0.f, 0.f, shadow_map_size.x * 0.5f, shadow_map_size.y * 0.5f));
				cb->set_scissor(Rect(0.f, 0.f, shadow_map_size.x * 0.5f, shadow_map_size.y * 0.5f));

				auto pt_mesh_indirs_off = 0;
				auto pt_mesh_arm_indirs_off = 0;
				for (auto i = 0; i < nd.pt_shadows.size(); i++)
				{
					auto& mesh_indirs_vec = pt_shadow_mesh_indirs[i];
					auto& mesh_arm_indirs_vec = pt_shadow_mesh_arm_indirs[i];
					for (auto ly = 0; ly < 6; ly++)
					{
						auto cv = vec4(1.f, 0.f, 0.f, 0.f);
						cb->begin_renderpass(nullptr, nd.img_pt_shadow_maps[i]->get_shader_write_dst(0, ly, AttachmentLoadClear), &cv);
						bind_mesh_fwd_res();
						cb->push_constant_t(mesh::PLL_forward::PushConstant{ .i = ivec4(1, i, ly, 0) });
						cb->bind_vertex_buffer(nd.buf_mesh_vtx.buf.get(), 0);
						cb->bind_index_buffer(nd.buf_mesh_idx.buf.get(), IndiceTypeUint);
						pt_mesh_indirs_off = draw_meshes(MaterialForMeshShadow, mesh_indirs_vec[ly], pt_mesh_indirs_off);
						cb->bind_vertex_buffer(nd.buf_arm_mesh_vtx.buf.get(), 0);
						cb->bind_index_buffer(nd.buf_arm_mesh_idx.buf.get(), IndiceTypeUint);
						pt_mesh_arm_indirs_off = draw_meshes(MaterialForMeshShadowArmature, mesh_arm_indirs_vec[ly], pt_mesh_arm_indirs_off);
						cb->end_renderpass();
					}

					cb->image_barrier(nd.img_pt_shadow_maps[i].get(), { 0U, 1U, 0U, 6U }, ImageLayoutAttachment, ImageLayoutShaderReadOnly);
				}
			}

			nd.dir_shadows.clear();
			nd.pt_shadows.clear();

			auto fb_tar = fb_tars[tar_idx].get();
			auto vp = Rect(vec2(0.f), tar_sz);
			cb->set_viewport(vp);
			cb->set_scissor(vp);

			if (render_type == RenderShaded)
			{
				bind_terrain_def_res();
				draw_terrains();
				cb->end_renderpass();

				cb->set_viewport(vec4(vp) * 0.5f);
				cb->begin_renderpass(nullptr, nd.img_ao_back->get_shader_write_dst());
				cb->bind_pipeline(nd.pl_ssao);
				{
					DescriptorSet* sets[PLL_ssao::Binding_Max];
					sets[PLL_ssao::Binding_ssao] = nd.ds_ssao.get();
					sets[PLL_ssao::Binding_render_data] = nd.ds_render_data.get();
					cb->bind_descriptor_sets(0, countof(sets), sets);
				}
				cb->push_constant_t(PLL_ssao::PushConstant{ nd.ssao_radius, nd.ssao_bias });
				cb->draw(3, 1, 0, 0);
				cb->end_renderpass();

				cb->image_barrier(nd.img_ao_back.get(), {}, ImageLayoutAttachment, ImageLayoutShaderReadOnly);
				cb->begin_renderpass(nullptr, nd.img_ao->get_shader_write_dst());
				cb->bind_pipeline(nd.pl_ssao_blur);
				cb->bind_descriptor_set(0, nd.img_ao_back->get_shader_read_src());
				cb->push_constant_t(PLL_post::PushConstant{ .pxsz = { 1.f / vec2(nd.img_ao->get_size()) } });
				cb->draw(3, 1, 0, 0);
				cb->end_renderpass();
				cb->image_barrier(nd.img_ao.get(), {}, ImageLayoutAttachment, ImageLayoutShaderReadOnly);

				cb->begin_renderpass(nullptr, nd.img_dep_back->get_shader_write_dst());
				cb->bind_pipeline(nd.pl_blit_d16);
				cb->bind_descriptor_set(0, nd.img_dep->get_shader_read_src(0, 0, sp_nearest));
				cb->draw(3, 1, 0, 0);
				cb->end_renderpass();
				cb->image_barrier(nd.img_dep_back.get(), {}, ImageLayoutAttachment, ImageLayoutShaderReadOnly);

				cb->begin_renderpass(nullptr, nd.img_col_ms->get_shader_write_dst());
				cb->bind_pipeline(nd.pl_blit_rgba16ms4);
				cb->bind_descriptor_set(0, img_dst->get_shader_read_src(0, 0, sp_nearest));
				cb->draw(3, 1, 0, 0);
				cb->end_renderpass();

				cb->begin_renderpass(nullptr, nd.img_dep_ms->get_shader_write_dst());
				cb->bind_pipeline(nd.pl_blit_d16ms4);
				cb->bind_descriptor_set(0, nd.img_dep->get_shader_read_src(0, 0, sp_nearest));
				cb->draw(3, 1, 0, 0);
				cb->end_renderpass();

				cb->image_barrier(img_dst.get(), {}, ImageLayoutShaderReadOnly, ImageLayoutAttachment);
				cb->begin_renderpass(nullptr, nd.fb_fwd_ms4.get());
				bind_mesh_fwd_res();
				cb->bind_vertex_buffer(nd.buf_mesh_vtx.buf.get(), 0);
				cb->bind_index_buffer(nd.buf_mesh_idx.buf.get(), IndiceTypeUint);
				mesh_indirs_off = draw_meshes(MaterialForMesh, trn_mesh_indirs, mesh_indirs_off);
				cb->bind_vertex_buffer(nd.buf_arm_mesh_vtx.buf.get(), 0);
				cb->bind_index_buffer(nd.buf_arm_mesh_idx.buf.get(), IndiceTypeUint);
				mesh_arm_indirs_off = draw_meshes(MaterialForMeshArmature, trn_mesh_arm_indirs, mesh_arm_indirs_off);
				if (!nd.waters[MaterialCustom].empty())
				{
					bind_water_res();
					draw_waters();
				}
				if (nd.particles.size() > 1)
				{
					cb->bind_vertex_buffer(nd.buf_ptc_vtx.buf.get(), 0);
					cb->bind_pipeline(nd.pl_ptc);
					{
						DescriptorSet* sets[PLL_particle::Binding_Max];
						sets[PLL_particle::Binding_render_data] = nd.ds_render_data.get();
						sets[PLL_particle::Binding_material] = nd.ds_material.get();
						cb->bind_descriptor_sets(0, countof(sets), sets);
					}
					auto cnt = 0;
					for (auto& vec : nd.particles)
					{
						if (vec.second == 0)
							continue;
						cb->draw(vec.second, 1, cnt, vec.first);
						cnt += vec.second;
					}

					nd.particles.clear();
					nd.particles.emplace_back(0xffff, 0);
				}
				cb->end_renderpass();

				cb->image_barrier(img_dst.get(), {}, ImageLayoutGeneral, ImageLayoutShaderReadOnly);
				cb->begin_renderpass(nullptr, nd.img_dst_back->get_shader_write_dst());
				cb->bind_pipeline(nd.pl_bright);
				cb->bind_descriptor_set(0, img_dst->get_shader_read_src(0, 0, sp_nearest));
				cb->push_constant_t(PLL_post::PushConstant{ .f = vec4(nd.white_point, 0.f, 0.f, 0.f) });
				cb->draw(3, 1, 0, 0);
				cb->end_renderpass();

				auto lvs = nd.img_dst_back->get_levels();
				for (auto i = 0; i < lvs - 1; i++)
				{
					cb->image_barrier(nd.img_dst_back.get(), { (uint)i }, ImageLayoutAttachment, ImageLayoutShaderReadOnly);
					cb->set_viewport(Rect(vec2(0.f), nd.img_dst_back->get_size(i + 1)));
					cb->begin_renderpass(nullptr, nd.img_dst_back->get_shader_write_dst(i + 1));
					cb->bind_pipeline(nd.pl_downsample);
					cb->bind_descriptor_set(0, nd.img_dst_back->get_shader_read_src(i, 0, sp_linear));
					cb->push_constant_t(1.f / vec2(nd.img_dst_back->get_size(i)));
					cb->draw(3, 1, 0, 0);
					cb->end_renderpass();
				}
				for (auto i = lvs - 1; i > 1; i--)
				{
					cb->image_barrier(nd.img_dst_back.get(), { (uint)i }, ImageLayoutAttachment, ImageLayoutShaderReadOnly);
					cb->set_viewport(Rect(vec2(0.f), nd.img_dst_back->get_size(i - 1)));
					cb->image_barrier(nd.img_dst_back.get(), { (uint)i - 1 }, ImageLayoutShaderReadOnly, ImageLayoutAttachment);
					cb->begin_renderpass(nullptr, nd.img_dst_back->get_shader_write_dst(i - 1, 0, AttachmentLoadLoad));
					cb->bind_pipeline(nd.pl_upsample);
					cb->bind_descriptor_set(0, nd.img_dst_back->get_shader_read_src(i, 0, sp_linear));
					cb->push_constant_t(1.f / vec2(nd.img_dst_back->get_size(i)));
					cb->draw(3, 1, 0, 0);
					cb->end_renderpass();
				}
				cb->image_barrier(nd.img_dst_back.get(), { 1U }, ImageLayoutAttachment, ImageLayoutShaderReadOnly);
				cb->set_viewport(vp);
				cb->image_barrier(img_dst.get(), {}, ImageLayoutShaderReadOnly, ImageLayoutAttachment);
				cb->begin_renderpass(nullptr, img_dst->get_shader_write_dst(0, 0, AttachmentLoadLoad));
				cb->bind_pipeline(nd.pl_upsample);
				cb->bind_descriptor_set(0, nd.img_dst_back->get_shader_read_src(1, 0, sp_linear));
				cb->push_constant_t(1.f / vec2(nd.img_dst_back->get_size(1)));
				cb->draw(3, 1, 0, 0);
				cb->end_renderpass();
			}
		}

		{
			auto scissor = Rect(vec2(0.f), tar_sz);
			cb->set_viewport(scissor);
			cb->set_scissor(scissor);

			auto pvtx = ed.buf_vtx.pstag;
			auto pidx = ed.buf_idx.pstag;
			ed.buf_vtx.upload(cb);
			ed.buf_idx.upload(cb);

			if (nd.should_render)
				cb->begin_renderpass(rp_bgra8l, fb_tars[tar_idx].get());
			else
				cb->begin_renderpass(rp_bgra8c, fb_tars[tar_idx].get(), &clear_color);

			cb->bind_pipeline(ed.pl_element);
			cb->bind_vertex_buffer(ed.buf_vtx.buf.get(), 0);
			cb->bind_index_buffer(ed.buf_idx.buf.get(), IndiceTypeUint);
			cb->bind_descriptor_set(element::PLL_element::Binding_element, ed.ds_element.get());
			cb->push_constant_t(element::PLL_element::PushConstant{ 2.f / vec2(tar_sz) });
			auto vtx_off = 0;
			auto idx_off = 0;
			auto vtx_cnt = 0;
			auto idx_cnt = 0;
			auto res = -1;

			auto emit_draw = [&]() {
				if (vtx_cnt > 0)
				{
					cb->draw_indexed(idx_cnt, idx_off, vtx_off, 1, res);
					vtx_off += vtx_cnt;
					idx_off += idx_cnt;
					vtx_cnt = 0;
					idx_cnt = 0;
				}
			};

			for (auto i = 0; i < ed.max_layer; i++)
			{
				for (auto& info : ed.layers[i])
				{
					if (info.vertices.empty())
					{
						emit_draw();
						if (!(scissor == info.scissor))
						{
							scissor = info.scissor;
							cb->set_scissor(scissor);
						}
					}
					else
					{
						if (res != info.res)
						{
							emit_draw();
							res = info.res;
						}

						memcpy(pvtx + vtx_off + vtx_cnt, info.vertices.data(), sizeof(ElementVertex) * info.vertices.size());
						for (auto i = 0; i < info.indices.size(); i++)
							pidx[idx_off + idx_cnt + i] = vtx_cnt + info.indices[i];
						vtx_cnt += info.vertices.size();
						idx_cnt += info.indices.size();
					}
				}
				ed.layers[i].clear();
			}

			emit_draw();

			cb->end_renderpass();
		}
	}

	void sRendererPrivate::on_added()
	{
		ed.pl_element = Pipeline::get(nullptr, L"element/element.pipeline");

		ed.buf_vtx.create(BufferUsageVertex, 360000);
		ed.buf_idx.create(BufferUsageIndex, 240000);
		ed.ds_element.reset(DescriptorSet::create(nullptr, DescriptorSetLayout::get(nullptr, L"element/element.dsl")));
		ed.reses.resize(element::DSL_element::images_count);
		for (auto i = 0; i < ed.reses.size(); i++)
		{
			ed.ds_element->set_image(element::DSL_element::images_binding, i, iv_white, sp_linear);
			ed.reses[i] = iv_white;
		}
		ed.ds_element->update();

		nd.buf_water.create(BufferUsageStorage);
		nd.ds_water.reset(DescriptorSet::create(nullptr, DescriptorSetLayout::get(nullptr, L"water/water.dsl")));
		nd.ds_water->set_buffer(water::DSL_water::WaterInfos_binding, 0, nd.buf_water.buf.get());
		nd.ds_water->update();

		nd.pll_water = PipelineLayout::get(nullptr, L"water/water.pll");

		std::uniform_real_distribution<float> r(0.f, 1.f);
		std::default_random_engine rd;

		nd.buf_ssao_loc.create(BufferUsageUniform);
		{
			auto& data = *nd.buf_ssao_loc.pstag;
			for (auto i = 0; i < _countof(data.sample_locations); i++)
			{
				vec3 sample(r(rd) * 2.f - 1.f, r(rd), r(rd) * 2.f - 1.f);
				sample = normalize(sample) * r(rd);

				auto scale = float(i) / _countof(data.sample_locations);
				scale = lerp(0.1f, 1.f, scale * scale);
				sample *= scale;
				data.sample_locations[i] = vec4(sample, 0.f);
			}

			nd.buf_ssao_loc.cpy_whole();
			nd.buf_ssao_loc.upload(cb.get());
		}
		nd.buf_ssao_noi.create(BufferUsageUniform);
		{
			auto& data = *nd.buf_ssao_noi.pstag;
			for (auto i = 0; i < _countof(data.sample_noises); i++)
				data.sample_noises[i] = vec4(normalize(vec3(r(rd) * 2.f - 1.f, 0.f, r(rd) * 2.f - 1.f)), 0.f);

			nd.buf_ssao_noi.cpy_whole();
			nd.buf_ssao_noi.upload(cb.get());
		}
		nd.pl_ssao = Pipeline::get(nullptr, L"deferred/ssao.pipeline");
		nd.pl_ssao_blur = Pipeline::get(nullptr, L"deferred/ssao_blur.pipeline");
		nd.ds_ssao.reset(DescriptorSet::create(nullptr, DescriptorSetLayout::get(nullptr, L"deferred/ssao.dsl")));
		nd.ds_ssao->set_buffer(DSL_ssao::SampleLocations_binding, 0, nd.buf_ssao_loc.buf.get());
		nd.ds_ssao->set_buffer(DSL_ssao::SampleNoises_binding, 0, nd.buf_ssao_noi.buf.get());
		nd.ds_ssao->update();

		nd.pl_ptc = Pipeline::get(nullptr, L"particle/particle.pipeline");

		nd.pl_bright = Pipeline::get(nullptr, L"post/bright.pipeline");
	}
}
