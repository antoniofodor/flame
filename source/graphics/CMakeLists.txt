file(GLOB source_files "*.h*" "*.c*")
add_library(flame_graphics SHARED ${source_files})
set_target_properties(flame_graphics PROPERTIES FOLDER "flame")
set_target_properties(flame_graphics PROPERTIES LINK_FLAGS "/INCREMENTAL:NO")
target_compile_definitions(flame_graphics PRIVATE FLAME_GRAPHICS_MODULE)
target_compile_definitions(flame_graphics PRIVATE VK_USE_PLATFORM_WIN32_KHR)
target_include_directories(flame_graphics PRIVATE "$ENV{VK_SDK_PATH}/Include")
target_include_directories(flame_graphics PRIVATE "${SPIRV_CROSS_INCLUDE_DIR}")
target_include_directories(flame_graphics PRIVATE "${STB_INCLUDE_DIR}")
target_include_directories(flame_graphics PRIVATE "${GLI_INCLUDE_DIR}")
target_link_libraries(flame_graphics "$ENV{VK_SDK_PATH}/Lib/vulkan-1.lib")
target_link_libraries(flame_graphics debug "${SPIRV_CROSS_DEBUG_LIBS_DIR}/spirv-cross-cored.lib")
target_link_libraries(flame_graphics debug "${SPIRV_CROSS_DEBUG_LIBS_DIR}/spirv-cross-reflectd.lib")
target_link_libraries(flame_graphics debug "${SPIRV_CROSS_DEBUG_LIBS_DIR}/spirv-cross-cppd.lib")
target_link_libraries(flame_graphics debug "${SPIRV_CROSS_DEBUG_LIBS_DIR}/spirv-cross-glsld.lib")
target_link_libraries(flame_graphics optimized "${SPIRV_CROSS_RELEASE_LIBS_DIR}/spirv-cross-core.lib")
target_link_libraries(flame_graphics optimized "${SPIRV_CROSS_RELEASE_LIBS_DIR}/spirv-cross-reflect.lib")
target_link_libraries(flame_graphics optimized "${SPIRV_CROSS_RELEASE_LIBS_DIR}/spirv-cross-cpp.lib")
target_link_libraries(flame_graphics optimized "${SPIRV_CROSS_RELEASE_LIBS_DIR}/spirv-cross-glsl.lib")
target_link_libraries(flame_graphics flame_foundation)
if (USE_ASSIMP)
	target_compile_definitions(flame_graphics PRIVATE USE_ASSIMP)
	target_include_directories(flame_graphics PRIVATE "${ASSIMP_INCLUDE_DIR}")
	target_link_libraries(flame_graphics "${ASSIMP_LIB_PATH}")
	add_custom_command(TARGET flame_graphics POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_if_different "${ASSIMP_DLL_PATH}" $(TargetDir))
else()
	message(STATUS "graphics module: Assimp is required for model import/export")
endif()
add_dependencies(flame_graphics typeinfogen_dep)
add_custom_command(TARGET flame_graphics POST_BUILD COMMAND $<TARGET_FILE:typeinfogen> -i $<TARGET_FILE:flame_graphics> -d "${CMAKE_CURRENT_SOURCE_DIR}/typeinfo.desc")

file(GLOB PUBLIC_HEADER "*.h*")
list(FILTER PUBLIC_HEADER EXCLUDE REGEX ".*_private[.]h$")
file(MAKE_DIRECTORY "${CMAKE_SOURCE_DIR}/include/flame/graphics")
add_custom_command(TARGET flame_graphics PRE_BUILD COMMAND ${CMAKE_COMMAND} -E copy_if_different ${PUBLIC_HEADER} "${CMAKE_SOURCE_DIR}/include/flame/graphics")
