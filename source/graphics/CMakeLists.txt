file(GLOB source_files "*.h*" "*.c*")
add_library(flame_graphics SHARED ${source_files})
set_target_properties(flame_graphics PROPERTIES FOLDER "flame")
target_compile_definitions(flame_graphics PRIVATE FLAME_GRAPHICS_MODULE)
target_compile_definitions(flame_graphics PRIVATE VK_USE_PLATFORM_WIN32_KHR)
target_include_directories(flame_graphics PRIVATE "$ENV{VK_SDK_PATH}/Include")
target_include_directories(flame_graphics PRIVATE "${SPIRV_CROSS_INCLUDE_DIR}")
target_include_directories(flame_graphics PRIVATE "${STB_INCLUDE_DIR}")
target_include_directories(flame_graphics PRIVATE "${GLI_INCLUDE_DIR}")
target_link_libraries(flame_graphics "$ENV{VK_SDK_PATH}/Lib/vulkan-1.lib")
target_link_libraries(flame_graphics debug "${SPIRV_CROSS_DEBUG_LIBS_DIR}/spirv-cross-cored.lib")
target_link_libraries(flame_graphics debug "${SPIRV_CROSS_DEBUG_LIBS_DIR}/spirv-cross-reflectd.lib")
target_link_libraries(flame_graphics debug "${SPIRV_CROSS_DEBUG_LIBS_DIR}/spirv-cross-cppd.lib")
target_link_libraries(flame_graphics debug "${SPIRV_CROSS_DEBUG_LIBS_DIR}/spirv-cross-glsld.lib")
target_link_libraries(flame_graphics optimized "${SPIRV_CROSS_RELEASE_LIBS_DIR}/spirv-cross-core.lib")
target_link_libraries(flame_graphics optimized "${SPIRV_CROSS_RELEASE_LIBS_DIR}/spirv-cross-reflect.lib")
target_link_libraries(flame_graphics optimized "${SPIRV_CROSS_RELEASE_LIBS_DIR}/spirv-cross-cpp.lib")
target_link_libraries(flame_graphics optimized "${SPIRV_CROSS_RELEASE_LIBS_DIR}/spirv-cross-glsl.lib")
target_link_libraries(flame_graphics flame_foundation)
if(USE_MSDFGEN)
	target_compile_definitions(flame_graphics PRIVATE USE_MSDFGEN)
	target_include_directories(flame_graphics PRIVATE "${MSDFGEN_INCLUDE_DIR}")
	target_link_libraries(flame_graphics "${MSDFGEN_LIB_PATH}")
else()
	message(STATUS "graphics module: msdfgen is required for sdf fonts")
endif()
if(USE_NVTT)
	target_compile_definitions(flame_graphics PRIVATE USE_NVTT)
	target_include_directories(flame_graphics PRIVATE "${NVTT_INCLUDE_DIR}")
	target_link_libraries(flame_graphics "${NVTT_LIB_PATH}")
	add_custom_command(TARGET flame_graphics POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_if_different "${NVTT_DLL_PATH}" $(TargetDir))
	add_custom_command(TARGET flame_graphics POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_if_different "${NVTT_CUDA_DLL_PATH}" $(TargetDir))
else()
	message(STATUS "graphics module: NVTT is required for texture compression")
endif()
if(USE_ASSIMP)
	target_compile_definitions(flame_graphics PRIVATE USE_ASSIMP)
	target_include_directories(flame_graphics PRIVATE "${ASSIMP_INCLUDE_DIR}")
	target_link_libraries(flame_graphics "${ASSIMP_LIB_PATH}")
	add_custom_command(TARGET flame_graphics POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_if_different "${ASSIMP_DLL_PATH}" $(TargetDir))
else()
	message(STATUS "graphics module: Assimp is required for model (except FBX) import")
endif()
if(USE_FBXSDK)
	target_compile_definitions(flame_graphics PRIVATE USE_FBXSDK)
	target_compile_definitions(flame_graphics PRIVATE FBXSDK_SHARED)
	target_include_directories(flame_graphics PRIVATE "${FBXSDK_INCLUDE_DIR}")
	target_link_libraries(flame_graphics "${FBXSDK_LIB_PATH}")
	add_custom_command(TARGET flame_graphics POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_if_different "${FBXSDK_DLL_PATH}" $(TargetDir))
else()
	message(STATUS "graphics module: FBX SDK is required for FBX import")
endif()
if(USE_FONT_AWESOME)
	target_compile_definitions(flame_graphics PRIVATE USE_FONT_AWESOME)
	target_compile_definitions(flame_graphics PRIVATE FONT_AWESOME_DIR="${FONT_AWESOME_DIR}")
endif()
if(USE_IMGUI)
	target_compile_definitions(flame_graphics PUBLIC USE_IMGUI)
	target_link_libraries(flame_graphics imgui)
else()
	message(STATUS "graphics module: ImGui is required for ui")
endif()
if(HAS_RENDERDOC)
	target_compile_definitions(flame_graphics PUBLIC HAS_RENDERDOC)
	target_compile_definitions(flame_graphics PRIVATE RENDERDOC_HEADER="${RENDERDOC_DIR}/renderdoc_app.h")
endif()

generate_typeinfo(flame_graphics "enum starts_with flame::graphics::")

file(GLOB headers "*.h*")
list(FILTER headers EXCLUDE REGEX ".*_private[.]h$")
file(MAKE_DIRECTORY "${CMAKE_SOURCE_DIR}/include/flame/graphics")
add_custom_command(TARGET flame_graphics PRE_BUILD COMMAND ${CMAKE_COMMAND} -E make_directory "${CMAKE_SOURCE_DIR}/include/flame/graphics")
add_custom_command(TARGET flame_graphics PRE_BUILD COMMAND ${CMAKE_COMMAND} -E copy_if_different ${headers} "${CMAKE_SOURCE_DIR}/include/flame/graphics")
