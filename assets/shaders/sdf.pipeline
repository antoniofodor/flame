%rp=forward.rp
%pll=forward.pll
layout
  {pll}
renderpass
  {rp}
shaders
  @vert
 ---
  @frag
cull_mode
  None
compare_op
  Always

@vert
layout(location = 0) out vec3 o_view;

void main()
{
	vec2 vs[] = {
		vec2(-1.0, -1.0),
		vec2(-1.0, +3.0),
		vec2(+3.0, -1.0)
	};
	vec2 v = vs[gl_VertexIndex];
	vec4 p = camera.proj_view_inv * vec4(v, 1, 1);
	p /= p.w;
	o_view = normalize(p.xyz);
	gl_Position = vec4(v, 1.0, 1.0);
}
@

@frag
#include "math.glsl"

layout(location = 0) in vec3 i_view;

#ifndef OCCLUDER_PASS
#ifndef GBUFFER_PASS
layout(location = 0) out vec4 o_color;
#else
layout(location = 0) out vec4 o_res_col_met;
layout(location = 1) out vec4 o_res_nor_rou;
#endif
#endif

const uint MaxSteps = 64;
const float Tolerance = 0.01;
const float MaxDepth = 1000.0;

float scene_sdf(vec3 p)
{
    float sphere = sd_sphere(p - vec3(2, 0.5, 2), 2.0);
    float box = ud_round_box(p - vec3(0, 0, 0), vec3(1, 2, 3), 0.2);
    
    return op_smooth_subtraction(sphere, box, 1);
}

float march(vec3 origin, vec3 dir)
{
	float depth = 0.0;
	for (int n = 0; n < MaxSteps; n++)
	{
		float distance = scene_sdf(origin + depth * dir);
		if (distance <= Tolerance)
			return depth;
		depth += distance;
		if (depth > MaxDepth)
			return MaxDepth + 1.0;
	}
	return MaxDepth + 1.0;
}

vec3 normal(vec3 p) 
{
    vec3 deltaX = vec3(Tolerance, 0.0, 0.0);
    vec3 deltaY = vec3(0.0, Tolerance, 0.0);
    vec3 deltaZ = vec3(0.0, 0.0, Tolerance);
    
    float x = scene_sdf(p + deltaX) - scene_sdf(p - deltaX);
    float y = scene_sdf(p + deltaY) - scene_sdf(p - deltaY);
    float z = scene_sdf(p + deltaZ) - scene_sdf(p - deltaZ);
    
    return normalize(vec3(x, y, z));
}

float projective_depth(float z, float n, float f)
{
	return ((f / (n - f)) * z - f * n / (f - n)) / -z;
}

void main()
{
	vec3 dir = normalize(i_view);
	vec3 origin = camera.coord;
	float depth = march(origin, dir);
	
	#ifndef OCCLUDER_PASS
		if (depth >= MaxDepth)
			discard;
		vec3 n = normal(origin + depth * dir);
		gl_FragDepth = projective_depth(-dot(camera.front, depth * dir), camera.zNear, camera.zFar);
		#ifndef GBUFFER_PASS
			o_color = vec4(1.0, 1.0, 1.0, 1.0);
		#else
			o_res_col_met = vec4(1.0, 1.0, 1.0, 0.0);
			o_res_nor_rou = vec4(n * 0.5 + 0.5, 1.0);
		#endif
	#endif
}
@
