%rp=color.rp
layout
  @pll
shaders
  fullscreen.vert
 ---
  @frag
renderpass
  {rp}
cull_mode
  None

@pll
layout (set = SET, binding = 0) uniform sampler2D img_col;
layout (set = SET, binding = 1) uniform sampler2D img_dep;

layout (push_constant) uniform PushConstant
{
	vec2 pxsz;
	float zFar;
	float focus_point;
	float focus_scale;
}pc;
@

@frag

layout(location = 0) in vec2 i_uv;

layout(location = 0) out vec4 o_color;

// https://blog.voxagon.se/2018/05/04/bokeh-depth-of-field-in-single-pass.html

const float GOLDEN_ANGLE = 2.39996323; 
const float MAX_BLUR_SIZE = 20.0; 
const float RAD_SCALE = 0.5; // Smaller = nicer blur, larger = faster

float getBlurSize(float depth)
{
	float coc = clamp((1.0 / pc.focus_point - 1.0 / depth) * pc.focus_scale, -1.0, 1.0);
	return abs(coc) * MAX_BLUR_SIZE;
}

vec3 depthOfField()
{
	float centerDepth = texture(img_dep, i_uv).r * pc.zFar;
	float centerSize = getBlurSize(centerDepth);
	vec3 color = texture(img_col, i_uv).rgb;
	float tot = 1.0;
	float radius = RAD_SCALE;
	for (float ang = 0.0; radius<MAX_BLUR_SIZE; ang += GOLDEN_ANGLE)
	{
		vec2 tc = i_uv + vec2(cos(ang), sin(ang)) * pc.pxsz * radius;
		vec3 sampleColor = texture(img_col, tc).rgb;
		float sampleDepth = texture(img_dep, tc).r * pc.zFar;
		float sampleSize = getBlurSize(sampleDepth);
		if (sampleDepth > centerDepth)
			sampleSize = clamp(sampleSize, 0.0, centerSize*2.0);
		float m = smoothstep(radius-0.5, radius+0.5, sampleSize);
		color += mix(color/tot, sampleColor, m);
		tot += 1.0;   radius += RAD_SCALE/radius;
	}
	return color /= tot;
}

void main()
{
    o_color = vec4(depthOfField(), 1.0);
}
@