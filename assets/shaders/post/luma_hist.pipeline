layout
  luma.pll
shaders
  @comp

@comp
#define GROUP_SIZE 256
#define THREADS_X 16
#define THREADS_Y 16

#define EPSILON 0.005
#define RGB_TO_LUM vec3(0.2125, 0.7154, 0.0721)

layout (local_size_x = THREADS_X, local_size_y = THREADS_Y, local_size_z = 1) in;

shared uint histogram_local[GROUP_SIZE];

uint color_to_bin(vec3 hdr_color, float min_log_luma, float one_over_log_lum_range) 
{
    float lum = dot(hdr_color, RGB_TO_LUM);

    if (lum < EPSILON)
        return 0;

    float log_lum = clamp((log2(lum) - min_log_luma) * one_over_log_lum_range, 0.0, 1.0);
    return uint(log_lum * 254.0 + 1.0);
}

void main() 
{
    histogram_local[gl_LocalInvocationIndex] = 0;
    barrier();

    ivec2 dim = imageSize(img_col).xy;
    if (gl_GlobalInvocationID.x < dim.x && gl_GlobalInvocationID.y < dim.y) 
    {
        vec3 hdr_color = imageLoad(img_col, ivec2(gl_GlobalInvocationID.xy)).rgb;
        uint binIndex = color_to_bin(hdr_color, pc.min_log_luma, pc.log_luma_range);
        atomicAdd(histogram_local[binIndex], 1);
    }

    barrier();

    atomicAdd(luma_hist.data[gl_LocalInvocationIndex], histogram_local[gl_LocalInvocationIndex]);
}
@
