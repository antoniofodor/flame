%rp=../color.rp
layout
  @pll
shaders
  ../fullscreen.vert
 ---
  @frag
renderpass
  {rp}

@pll
#include "../camera.dsl"

layout(set = SET, binding = 0) uniform sampler2D img_dst;
layout(set = SET, binding = 1) uniform sampler2D img_dep;
layout(set = SET, binding = 2) uniform sampler2D img_gbufferA;
layout(set = SET, binding = 3) uniform sampler2D img_gbufferB;
layout(set = SET, binding = 4) uniform sampler2D img_gbufferC;
@

@frag

layout (location = 0) in vec2 i_uv;

layout (location = 0) out vec4 o_color;

void main()
{
	float depth = texture(img_dep, i_uv).r;
	if (depth == 1.0)
		discard;

	vec4 view_pos = camera.proj_inv * vec4(i_uv * 2.0 - 1.0, depth, 1.0);
	view_pos /= view_pos.w;
		
	vec4 gbuffer_dataA = texture(img_gbufferA, i_uv);
	vec4 gbuffer_dataB = texture(img_gbufferB, i_uv);
	vec4 gbuffer_dataC = texture(img_gbufferC, i_uv);

	vec3 N = mat3(camera.view) * (gbuffer_dataB.xyz * 2.0 - 1.0);
	vec3 V = normalize(-view_pos.xyz);
	vec3 R = reflect(-V, N);
	vec3 hit_pos = view_pos.xyz;
	
	o_color = vec4(V, 1);
}
@
