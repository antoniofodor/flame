%rp=color.rp
layout
  @pll
shaders
  fullscreen.vert
 ---
  @frag
renderpass
  {rp}
cull_mode
  None

@pll
#include "camera.dsl"
#include "lighting.dsl"
#include "material.dsl"

layout(set = SET, binding = 0) uniform sampler2D img_gbufferA;
layout(set = SET, binding = 1) uniform sampler2D img_gbufferB;
layout(set = SET, binding = 2) uniform sampler2D img_gbufferC;
layout(set = SET, binding = 3) uniform sampler2D img_gbufferD;
@

@frag
#include "math.glsl"
#include "shading.glsl"

layout (location = 0) in vec2 i_uv;

layout (location = 0) out vec4 o_color;

void main()
{
	float depth = texture(img_dep, i_uv).r;
	vec4 view_pos = camera.proj_inv * vec4(i_uv * 2.0 - 1.0, depth, 1.0);
	view_pos /= view_pos.w;

	if (depth < 1.0)
	{
		vec4 gbuffer_dataA = texture(img_gbufferA, i_uv);
		vec4 gbuffer_dataB = texture(img_gbufferB, i_uv);
		vec4 gbuffer_dataC = texture(img_gbufferC, i_uv);
		vec4 gbuffer_dataD = texture(img_gbufferD, i_uv);

		vec3 color = gbuffer_dataA.rgb;
		vec3 N = gbuffer_dataB.xyz * 2.0 - 1.0;
		float metallic = gbuffer_dataC.r;
		float roughness = gbuffer_dataC.g;
		vec3 albedo = (1.0 - metallic) * color;
		vec3 spec = mix(vec3(0.04), color.rgb, metallic);
		
		vec4 world_pos = camera.view_inv * view_pos;
		o_color = vec4(shading(world_pos.xyz, N, metallic, albedo, spec, roughness, 1.0/*ao*/), 1.0);
	}
	else
		o_color = vec4(texture(sky_map, cube_coord(normalize(mat3(camera.view_inv) * vec3(view_pos)))).rgb * lighting.sky_intensity, 1.0);
}
@
