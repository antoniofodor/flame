%rp=forward.rp
%pll=forward.pll
%bsc=SrcAlpha
%bdc=OneMinusSrcAlpha
layout
  {pll}
shaders
  @vert
 ---
  @geom
 ---
  @frag
renderpass
  {rp}
cull_mode
  None
primitive_topology
  PointList
depth_write
  false
blend_options
  enable
    true
  src_color
    {bsc}
  dst_color
    {bdc}
  src_alpha
    Zero
  dst_alpha
    Zero

@vert
#include "particle.vi"

layout(location = 0) out vec3 o_xext;
layout(location = 1) out vec3 o_yext;
layout(location = 2) out vec4 o_col;
layout(location = 3) out vec4 o_uv;
layout(location = 4) out float o_time;
layout(location = 5) out flat uint o_matid;

void main()
{
	o_xext = i_xext;
	o_yext = i_yext;
	o_col = i_col;
	o_uv = i_uv;
	o_time = i_time;
	o_matid = gl_InstanceIndex >> 16;
	gl_Position = vec4(i_pos, 1.0);
}
@

@geom
layout (points) in;
layout (triangle_strip, max_vertices = 4) out;

layout(location = 0) in vec3 i_xext[];
layout(location = 1) in vec3 i_yext[];
layout(location = 2) in vec4 i_col[];
layout(location = 3) in vec4 i_uv[];
layout(location = 4) in float i_time[];
layout(location = 5) in flat uint i_matid[];

layout(location = 0) out vec4 o_col;
layout(location = 1) out vec2 o_uv;
layout(location = 2) out float o_time;
layout(location = 3) out flat uint o_matid;

void main()
{
	vec3 pos = vec3(gl_in[0].gl_Position);

	o_col = i_col[0];
	o_uv = i_uv[0].xw;
	o_time = i_time[0];
	o_matid = i_matid[0];
	gl_Position = camera.proj_view * vec4(pos - i_xext[0] - i_yext[0], 1.0);
	EmitVertex();

	o_col = i_col[0];
	o_uv = i_uv[0].zw;
	o_time = i_time[0];
	o_matid = i_matid[0];
	gl_Position = camera.proj_view * vec4(pos + i_xext[0] - i_yext[0], 1.0);
	EmitVertex();

	o_col = i_col[0];
	o_uv = i_uv[0].xy;
	o_time = i_time[0];
	o_matid = i_matid[0];
	gl_Position = camera.proj_view * vec4(pos - i_xext[0] + i_yext[0], 1.0);
	EmitVertex();

	o_col = i_col[0];
	o_uv = i_uv[0].zy;
	o_time = i_time[0];
	o_matid = i_matid[0];
	gl_Position = camera.proj_view * vec4(pos + i_xext[0] + i_yext[0], 1.0);
	EmitVertex();

	EndPrimitive();
}
@


@frag
layout(location = 0) in vec4 i_col;
layout(location = 1) in vec2 i_uv;
layout(location = 2) in float i_time;
layout(location = 3) in flat uint i_matid;

layout(location = 0) out vec4 o_color;

void main()
{
#ifdef MAT_CODE
	MaterialInfo material = material.infos[i_matid];
	#include MAT_CODE
#else
	o_color = i_col;
#endif
}
@
