layout
  @pll
shaders
  @comp

@pll
layout(set = SET, binding = 0) uniform Path
{
	uint n;
	vec2 p[1023];
}path;

layout(set = SET, binding = 1) uniform sampler2D dep;

layout(set = SET, binding = 2, r8) uniform writeonly image3D dst;

layout(push_constant) uniform PushConstant
{
	vec3 extent;
	uvec3 cells;
	float avg_height;
	float max_slope;
}pc;
@

@comp
#include "../math.glsl"
layout (local_size_x = 4, local_size_y = 4, local_size_z = 4) in;
void main()
{
	uvec3 dst_coord = gl_WorkGroupID * 4 + gl_LocalInvocationID;
	vec3 uv = vec3(dst_coord + 0.5) / pc.cells;
	vec3 pos = uv * pc.extent;

	for (int i = 1; i < path.n; i++)
	{
		vec2 v = path.p[i - 1];
		vec2 w = path.p[i];
		vec2 vw = w - v;
		float l2 = length_squared(vw);
		if (l2 == 0.0)
			continue;
		float t = dot(pos.xz - v, vw) / l2;
		if (t > 0.0 && t < 1.0)
		{
			float d = distance(pos.xz, mix(v, w, t));
			if (d < 5)
			{
				float h = (1 - texture(dep, uv.xz).r) * pc.extent.y;
				h = pc.avg_height + (h - pc.avg_height) / pc.max_slope;
				if (pos.y > h - 3 && pos.y < h + 3)
				{
					float v = 0.0;
					imageStore(dst, ivec3(dst_coord), vec4(v, 0, 0, 0));
					return;
				}
			}
		}
	}
}
@
