layout
  @pll
shaders
  @comp

@pll
layout (set = SET, binding = 0) uniform Path
{
	uint n;
	vec3 p[1023];
}path;

layout (set = SET, binding = 1, r8) uniform writeonly image3D dst;

layout (push_constant) uniform PushConstant
{
	vec3 extent;
	uvec3 cells;
}pc;
@

@comp
#include "../math.glsl"
layout (local_size_x = 4, local_size_y = 4, local_size_z = 4) in;
void main()
{
	uvec3 dst_coord = gl_WorkGroupID * 4 + gl_LocalInvocationID;
	vec3 pos = vec3(dst_coord + 0.5) / pc.cells * pc.extent;

	for (int i = 1; i < path.n; i++)
	{
		vec3 v = path.p[i - 1];
		vec3 w = path.p[i];
		vec3 vw = w - v;
		float l2 = length_squared(vw);
		if (l2 == 0.0)
			continue;
		float t = dot(pos - v, vw) / l2;
		if (t > 0.0 && t < 1.0)
		{
			float d = distance(pos, mix(v, w, t));
			if (d < 5.0)
			{
				float v = 0.0;
				if (d > 4.5)
					v = 1 - (5 - d) / 0.5;
				imageStore(dst, ivec3(dst_coord), vec4(v, 0, 0, 0));
			}
		}
	}
}
@
