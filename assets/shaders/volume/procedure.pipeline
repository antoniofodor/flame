layout
  @pll
shaders
  @comp

@pll
layout (set = SET, binding = 0) uniform sampler3D noise;
layout (set = SET, binding = 1, r8) uniform writeonly image3D dst;

layout (push_constant) uniform PushConstant
{
	vec3 extent;
	uvec3 cells;
	float offset;
	vec4 plane0;
	float amplitude_scale;
	uint structure_octaves;
	uint detail_octaves;
	float structure_amplitudes[16];
	float detail_amplitudes[16];
}pc;
@

@comp

float get_noise(vec3 pos)
{
	return texture(noise, pos).r * 2.0 - 1.0;
}

layout (local_size_x = 4, local_size_y = 4, local_size_z = 4) in;
void main()
{
	uvec3 dst_coord = gl_WorkGroupID * 4 + gl_LocalInvocationID;
	vec3 pos = vec3(dst_coord) / pc.cells * pc.extent;
	float density = pc.offset - pos.y;
	for (int i = 0; i < pc.structure_octaves; i++)
	{
		float amplitude = pc.structure_amplitudes[i] * pc.amplitude_scale;
		float strength = float(1 << i);
		density += get_noise(pos * amplitude).r * strength;
	}
	for (int i = 1; i <= pc.detail_octaves; i++)
	{
		float amplitude = pc.detail_amplitudes[i] * pc.amplitude_scale;
		float strength = 1.0 / float(1 << i);
		density += get_noise(pos * amplitude).r * strength;
	}

	density += clamp((pc.plane0.x - pos.y * pc.plane0.y) * pc.plane0.z, 0, 1) * pc.plane0.w;

	imageStore(dst, ivec3(dst_coord), vec4(density, 0, 0, 0));
}
@
