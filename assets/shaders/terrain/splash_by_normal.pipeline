layout
  @pll
shaders
  ../fullscreen.vert
 ---
  @frag
renderpass
  {rp}
cull_mode
  None
  
@pll
layout (push_constant) uniform PushConstant
{
	vec4 bar;
	float transition;
}pc;

layout (set = SET, binding = 0) uniform sampler2D img_normal;
@

@frag
#include "../math.glsl"

layout (location = 0) in vec2 i_uv;

layout (location = 0) out vec4 o_color;

void main()
{
	vec3 nor = texture(img_normal, i_uv).xyz * 2.0 - vec3(1.0);
	float angle = asin(nor.y) / 3.14159 * 180.0;
#if LAYERS == 1
	o_color = vec4(1.0, 0.0, 0.0, 0.0);
#elif LAYERS == 2
	vec2 weight;
	weight[0] = interpolate(angle, 0.0, pc.bar[0], pc.transition);
	weight[1] = interpolate(angle, pc.bar[0], 90.0, pc.transition);
	weight /= weight[0] + weight[1];
	o_color = vec4(weight, 0.0, 0.0);
#elif LAYERS == 3
	vec3 weight;
	weight[0] = interpolate(angle, 0.0, pc.bar[0], pc.transition);
	weight[1] = interpolate(angle, pc.bar[0], pc.bar[1], pc.transition);
	weight[2] = interpolate(angle, pc.bar[1], 90.0, pc.transition);
	weight /= weight[0] + weight[1] + weight[2];
	o_color = vec4(weight, 0.0);
#elif LAYERS == 4
	vec4 weight;
	weight[0] = interpolate(angle, 0.0, pc.bar[0], pc.transition);
	weight[1] = interpolate(angle, pc.bar[0], pc.bar[1], pc.transition);
	weight[2] = interpolate(angle, pc.bar[1], pc.bar[2], pc.transition);
	weight[3] = interpolate(angle, pc.bar[2], 90.0, pc.transition);
	weight /= weight[0] + weight[1] + weight[2] + weight[3];
	o_color = weight;
#endif
}
@
