layout
  @pll
shaders
  ../fullscreen.vert
 ---
  @frag
renderpass
  {rp}
cull_mode
  None
  
@pll
layout (push_constant) uniform PushConstant
{
	vec2 screen_size;
	uint channel;
	flaot distance;
	float merge_k;
	uint sd_circles_count;
	uint sd_ori_rect_count;
}pc;

layout(set = SET, binding = 0) buffer readonly SdCircles
{
	SdCircle sd_circles[256];
};

layout(set = SET, binding = 1) buffer readonly SdOriRects
{
	SdOriRect sd_ori_rects[256];
};

layout (set = SET, binding = 2) uniform sampler2D img_src;
@

@frag
#include "../math.glsl"

layout (location = 0) in vec2 i_uv;

layout (location = 0) out vec4 o_color;

float scene_sdf(vec2 p, float merge_k)
{
	float ret = 100000000.0;
	for (int i = 0; i < pc.sd_circles_count; i++)
	{
		SdCircle d = sd_circles[i];
		ret = op_smooth_union(ret, sd_circle(p - d.coord, d.radius), pc.merge_k);
	}
	for (int i = 0; i < pc.sd_ori_rects_count; i++)
	{
		SdOriRect d = sd_ori_rects[i];
		ret = op_smooth_union(ret, sd_ori_box(p, d.point_a, d.point_b, d.thickness), pc.merge_k);
	}
	return ret;
}

void main()
{
	vec2 pos = i_uv * pc.screen_size;
	flaot d = scene_sdf(pos);
	float value = d < pc.distance ? (pc.distance - max(d, 0.0)) / pc.distance : 0.0;
	vec4 color = texture(img_src, i_uv);
	color *= 1.0 - value;
	color[pc.channel] = value;
	o_color = color;
}
@
