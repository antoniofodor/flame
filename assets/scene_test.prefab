<?xml version="1.0"?>
<prefab>
  <entity name="base">
    <cElement alignx="MinMax" aligny="MinMax" />
    <cReceiver />
    <cNode />
    <cScript>
      world = root.get_world()
      s_physics = world.find_system("sPhysics")
      s_dispatcher = world.find_system("sDispatcher")
      s_renderer = world.find_system("sRenderer")
      canvas = s_renderer.get_canvas()

      base = entity
      
      selected = {}
      selected.p = nil
      function select(e)
        if selected.p then
          selected.set_state(find_enum("StateFlags")["None"])
        end
        selected = e
        if selected.p then
          selected.set_state(find_enum("StateFlags")["Selected"])
        end
        s_renderer.mark_dirty()
      end
    </cScript>
    <entity name="scene">
      <cNode />
      <cScript src="defe:shoot_ball.lua defe:plane_tree.lua" >
        scene = entity

        selected = {}
        selected.p = nil
        
        local last_mpos = vec2(0, 0)
        local base_receiver = base.find_component("cReceiver")
        base_receiver.add_mouse_left_down_listener(function(p)
          last_mpos.x = p.x
          last_mpos.y = p.y
        end)
        base_receiver.add_mouse_left_up_listener(function(p)
          if p.x == last_mpos.x and p.y == last_mpos.y then
            local e = {}
            e.p = canvas.pickup(last_mpos)
            make_obj(e, "flame::Entity")
            select(e)
          end
        end)
      </cScript>
      <entity src="D:\sky\sky" />
      <eCube pos="0,150,0" dynamic="false" />
      <eCube pos="10,150,0" dynamic="false" />
      <eCube pos="0,150,5" dynamic="false" />
      <entity name="character" src="D:\character\character" >
        <cNode pos="0,155,0" />
        <cController radius="0.5" height="1.8" />
        <cScript src="character_controller.lua" />
        <entity name="camera">
          <cNode pos="0,5,0" euler="0,0,0" />
          <cCamera current="true" />
          <cScript src="camera_third.lua" />
        </entity>
      </entity>
      <entity name="terrain" src="D:\terrain\terrain">
        <cNode pos="-100,100,-100" />
      </entity>
      <entity>
        <cNode euler="0,90,0" />
        <cLight type="Directional" color="1.0,1.0,1.0" cast_shadow="true" />
      </entity>
    </entity>
    <entity>
      <cElement />
      <cPostEffect enable_bloom="true" />
    </entity>
    <eElement name="debug" />
    <entity name="hud_global_axes">
      <cElement width="100" height="100" alignx="Max" aligny="Max" fill_color="0,0,0,100" />
      <cScript>
        local element = entity.find_component("cElement")
        flame_perspective(0, 45, 1, 1, 100)
        element.add_drawer(function(canvas)
          local p0 = element.get_point(0)
          local p2 = element.get_point(2)
          local sz = p2 - p0
          p0 = p0 + sz * 0.5
          __mat_id__ = 1
          canvas.get_view_matrix()

          local a0 = flame_transform(1, vec4(0, 0, 0, 0))
          a0.z = a0.z - 5
          a0 = flame_transform(0, a0)
          a0.x = a0.x / a0.w
          a0.y = a0.y / a0.w
          local a0_2 = vec2(a0.x, a0.y)

          local ax = flame_transform(1, vec4(1, 0, 0, 0))
          ax.z = ax.z - 5
          ax = flame_transform(0, ax)
          ax.x = ax.x / ax.w
          ax.y = ax.y / ax.w
          canvas.begin_path()
          canvas.move_to(a0_2 * sz + p0)
          canvas.line_to(vec2(ax.x, ax.y) * sz + p0)
          canvas.stroke(vec4(255, 0, 0, 255), 2, false)

          local ay = flame_transform(1, vec4(0, 1, 0, 0))
          ay.z = ay.z - 5
          ay = flame_transform(0, ay)
          ay.x = ay.x / ay.w
          ay.y = ay.y / ay.w
          canvas.begin_path()
          canvas.move_to(a0_2 * sz + p0)
          canvas.line_to(vec2(ay.x, ay.y) * sz + p0)
          canvas.stroke(vec4(0, 255, 0, 255), 2, false)

          local az = flame_transform(1, vec4(0, 0, 1, 0))
          az.z = az.z - 5
          az = flame_transform(0, az)
          az.x = az.x / az.w
          az.y = az.y / az.w
          canvas.begin_path()
          canvas.move_to(a0_2 * sz + p0)
          canvas.line_to(vec2(az.x, az.y) * sz + p0)
          canvas.stroke(vec4(0, 0, 255, 255), 2, false)
        end, true)
      </cScript>
    </entity>
    <entity name="hud_crosshair" visible="false" >
      <cElement alignx="MinMax" aligny="MinMax" />
      <cScript>
        local element = entity.find_component("cElement")
        element.add_drawer(function(canvas)
          local p0 = element.get_point(0)
          local p2 = element.get_point(2)
          local sz = p2 - p0
          p0 = p0 + sz * 0.5
          canvas.begin_path()
          canvas.move_to(p0 - vec2(4, 0))
          canvas.line_to(p0 + vec2(4, 0))
          canvas.move_to(p0 - vec2(0, 4))
          canvas.line_to(p0 + vec2(0, 4))
          canvas.stroke(vec4(255, 0, 0, 255), 1, false)
        end, true)
      </cScript>
    </entity>
    <eElement name="ui" alignx="MinMax" aligny="MinMax" layout_type="Vertical" >
      <cScript>
        ui = entity
      </cScript>
      <eMenuBar>
        <eMenu text="shading" >
		      <eMenuItem checkable="true" checked="true" text="solid" >
            <cScript>
              local menu_item = entity.find_driver("dMenuItem")
              entity.find_component("cReceiver").add_mouse_left_down_listener(function()
                s_renderer.set_shade_wireframe(false)
                menu_item.set_single_checked()
              end)
            </cScript>
          </eMenuItem>
		      <eMenuItem checkable="true" text="wireframe" >
            <cScript>
              local menu_item = entity.find_driver("dMenuItem")
              entity.find_component("cReceiver").add_mouse_left_down_listener(function()
                s_renderer.set_shade_wireframe(true)
                menu_item.set_single_checked()
              end)
            </cScript>
          </eMenuItem>
        </eMenu>
        <eMenu text="show" >
          <eMenuItem checkable="true" checked="true" text="global axes" >
            <cScript>
              local menu_item = entity.find_driver("dMenuItem")
              local global_axes = base.find_child("hud_global_axes")
              entity.find_component("cReceiver").add_mouse_left_down_listener(function()
                local checked = menu_item.get_checked()
                checked = not checked
                menu_item.set_checked(checked)
                global_axes.set_visible(checked)
              end)
            </cScript>
          </eMenuItem>
          <eMenuItem checkable="true" text="crosshair" >
            <cScript>
              local menu_item = entity.find_driver("dMenuItem")
              local crosshair = base.find_child("hud_crosshair")
              entity.find_component("cReceiver").add_mouse_left_down_listener(function()
                local checked = menu_item.get_checked()
                checked = not checked
                menu_item.set_checked(checked)
                crosshair.set_visible(checked)
              end)
            </cScript>
          </eMenuItem>
		      <eMenuItem checkable="true" text="physics visualization" >
            <cScript>
              local menu_item = entity.find_driver("dMenuItem")
              entity.find_component("cReceiver").add_mouse_left_down_listener(function()
                local checked = menu_item.get_checked()
                checked = not checked
                menu_item.set_checked(checked)
                s_physics.set_visualization(checked)
              end)
            </cScript>
          </eMenuItem>
          <eMenuItem checkable="true" text="ui reflector" >
            <cScript>
              local menu_item = entity.find_driver("dMenuItem")
              ui_reflector = {}
              ui_reflector.p = nil
                
              entity.find_component("cReceiver").add_mouse_left_down_listener(function()
                local checked = menu_item.get_checked()
                checked = not checked
                menu_item.set_checked(checked)
                if checked then
                  if not ui_reflector.p then
                    ui_reflector = find_udt("Entity").static_functions.create()
		                ui_reflector.load("ui_reflector")
                    ui.add_child(ui_reflector)
                  end
                else
                  if ui_reflector.p then
                    ui_reflector.get_parent().remove_child(ui_reflector)
                    ui_reflector.p = nil
                  end
                end
              end)
            </cScript>
          </eMenuItem>
          <eMenuItem checkable="true" text="hierarchy" >
            <cScript>
              local menu_item = entity.find_driver("dMenuItem")
              hierarchy = {}
              hierarchy.p = nil

              entity.find_component("cReceiver").add_mouse_left_down_listener(function()
                  local checked = menu_item.get_checked()
                  checked = not checked
                  menu_item.set_checked(checked)
                if checked then
                  if not hierarchy.p then
                    hierarchy = find_udt("Entity").static_functions.create()
		                hierarchy.load("hierarchy")
                    ui.add_child(hierarchy)
                  end
                else
                  if hierarchy.p then
                    hierarchy.get_parent().remove_child(hierarchy)
                    hierarchy.p = nil
                  end
                end
              end)
            </cScript>
          </eMenuItem>
        </eMenu>
        <eMenu text="settings" >
          <eMenuItem checkable="true" text="always update" >
            <cScript>
                local menu_item = entity.find_driver("dMenuItem")
                entity.find_component("cReceiver").add_mouse_left_down_listener(function()
                  local checked = menu_item.get_checked()
                  checked = not checked
                  menu_item.set_checked(checked)
                end)
            </cScript>
          </eMenuItem>
        </eMenu>
      </eMenuBar>
      <eElement name="toolbar" layout_type="Horizontal" >
        <eToolButton text="" />
        <eToolButton text="" />
      </eElement>
    </eElement>
  </entity>
</prefab>
